
project_kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  080031f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000320  20000068  08003260  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000388  08003260  00020388  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013edc  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026dc  00000000  00000000  00033f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000051a4  00000000  00000000  00036650  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000888  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000be0  00000000  00000000  0003c080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000053a1  00000000  00000000  0003cc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003ac8  00000000  00000000  00042001  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00045ac9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000018f8  00000000  00000000  00045b48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003130 	.word	0x08003130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003130 	.word	0x08003130

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_InitTick+0x24>)
{
 8000594:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	f000 fd02 	bl	8000fa8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	4621      	mov	r1, r4
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 fcc8 	bl	8000f40 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd10      	pop	{r4, pc}
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_Init>:
{
 80005b8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 fcae 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff ffe5 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 80005c6:	f002 f84f 	bl	8002668 <HAL_MspInit>
}
 80005ca:	2000      	movs	r0, #0
 80005cc:	bd08      	pop	{r3, pc}
	...

080005d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005d0:	4a02      	ldr	r2, [pc, #8]	; (80005dc <HAL_IncTick+0xc>)
 80005d2:	6813      	ldr	r3, [r2, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090

080005e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_GetTick+0x8>)
 80005e2:	6818      	ldr	r0, [r3, #0]
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000090 	.word	0x20000090

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
 80005ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff fff6 	bl	80005e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80005f6:	4605      	mov	r5, r0
  {
    wait++;
 80005f8:	bf18      	it	ne
 80005fa:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80005fc:	f7ff fff0 	bl	80005e0 <HAL_GetTick>
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d8fa      	bhi.n	80005fc <HAL_Delay+0x10>
  {
  }
}
 8000606:	bd38      	pop	{r3, r4, r5, pc}

08000608 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000608:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800060a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800060e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000612:	fab6 f386 	clz	r3, r6
 8000616:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800061a:	40de      	lsrs	r6, r3
 800061c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800061e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8000622:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000626:	fa93 f5a3 	rbit	r5, r3
 800062a:	fab5 f585 	clz	r5, r5
 800062e:	fa93 f3a3 	rbit	r3, r3
 8000632:	2407      	movs	r4, #7
 8000634:	fa21 f505 	lsr.w	r5, r1, r5
 8000638:	fa04 f505 	lsl.w	r5, r4, r5
 800063c:	fab3 f383 	clz	r3, r3
 8000640:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8000644:	40d9      	lsrs	r1, r3
 8000646:	ea24 0405 	bic.w	r4, r4, r5
 800064a:	fa02 f101 	lsl.w	r1, r2, r1
 800064e:	4321      	orrs	r1, r4
 8000650:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8000654:	bd70      	pop	{r4, r5, r6, pc}
	...

08000658 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000658:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800065e:	4604      	mov	r4, r0
 8000660:	2800      	cmp	r0, #0
 8000662:	f000 80b2 	beq.w	80007ca <HAL_ADC_Init+0x172>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000666:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000668:	b925      	cbnz	r5, 8000674 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800066a:	f002 f843 	bl	80026f4 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800066e:	65e5      	str	r5, [r4, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000670:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 8000674:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800067a:	bf41      	itttt	mi
 800067c:	689a      	ldrmi	r2, [r3, #8]
 800067e:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8000682:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8000686:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8000688:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 800068a:	00d1      	lsls	r1, r2, #3
 800068c:	d574      	bpl.n	8000778 <HAL_ADC_Init+0x120>
 800068e:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000690:	00d2      	lsls	r2, r2, #3
 8000692:	f140 8088 	bpl.w	80007a6 <HAL_ADC_Init+0x14e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000696:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000698:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800069a:	06d5      	lsls	r5, r2, #27
 800069c:	f100 8091 	bmi.w	80007c2 <HAL_ADC_Init+0x16a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80006a0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006a2:	0751      	lsls	r1, r2, #29
 80006a4:	f100 808d 	bmi.w	80007c2 <HAL_ADC_Init+0x16a>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006a8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80006aa:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80006ae:	f042 0202 	orr.w	r2, r2, #2
 80006b2:	65a2      	str	r2, [r4, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	f002 0203 	and.w	r2, r2, #3
 80006ba:	2a01      	cmp	r2, #1
 80006bc:	f040 8087 	bne.w	80007ce <HAL_ADC_Init+0x176>
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	07d2      	lsls	r2, r2, #31
 80006c4:	f140 8083 	bpl.w	80007ce <HAL_ADC_Init+0x176>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 80006c8:	68e5      	ldr	r5, [r4, #12]
 80006ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80006cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 80006ce:	432a      	orrs	r2, r5
 80006d0:	68a5      	ldr	r5, [r4, #8]
 80006d2:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80006d4:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006d6:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 80006d8:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80006dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80006e0:	bf02      	ittt	eq
 80006e2:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 80006e4:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80006e8:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80006ee:	b121      	cbz	r1, 80006fa <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80006f0:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006f2:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80006f6:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006f8:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80006fa:	68dd      	ldr	r5, [r3, #12]
 80006fc:	4938      	ldr	r1, [pc, #224]	; (80007e0 <HAL_ADC_Init+0x188>)
 80006fe:	4029      	ands	r1, r5
 8000700:	430a      	orrs	r2, r1
 8000702:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	f012 0f0c 	tst.w	r2, #12
 800070a:	d11e      	bne.n	800074a <HAL_ADC_Init+0xf2>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800070c:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800070e:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000710:	69a5      	ldr	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000712:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000714:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8000718:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800071c:	f021 0102 	bic.w	r1, r1, #2
 8000720:	430a      	orrs	r2, r1
 8000722:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000724:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000726:	2a01      	cmp	r2, #1
 8000728:	d147      	bne.n	80007ba <HAL_ADC_Init+0x162>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800072a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800072c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800072e:	6919      	ldr	r1, [r3, #16]
 8000730:	432a      	orrs	r2, r5
 8000732:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000734:	f042 0201 	orr.w	r2, r2, #1
 8000738:	432a      	orrs	r2, r5
 800073a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800073c:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8000740:	432a      	orrs	r2, r5
 8000742:	f021 0104 	bic.w	r1, r1, #4
 8000746:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000748:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800074a:	6922      	ldr	r2, [r4, #16]
 800074c:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800074e:	bf05      	ittet	eq
 8000750:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8000752:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000754:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000756:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800075a:	bf06      	itte	eq
 800075c:	f021 010f 	biceq.w	r1, r1, #15
 8000760:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000762:	f022 020f 	bicne.w	r2, r2, #15
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000768:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800076a:	f023 0303 	bic.w	r3, r3, #3
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000774:	b003      	add	sp, #12
 8000776:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8000778:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800077a:	491a      	ldr	r1, [pc, #104]	; (80007e4 <HAL_ADC_Init+0x18c>)
 800077c:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8000780:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000784:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <HAL_ADC_Init+0x190>)
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	fbb2 f1f1 	udiv	r1, r2, r1
 8000792:	220a      	movs	r2, #10
 8000794:	434a      	muls	r2, r1
      wait_loop_index--;
 8000796:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 8000798:	9a01      	ldr	r2, [sp, #4]
 800079a:	2a00      	cmp	r2, #0
 800079c:	f43f af77 	beq.w	800068e <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80007a0:	9a01      	ldr	r2, [sp, #4]
 80007a2:	3a01      	subs	r2, #1
 80007a4:	e7f7      	b.n	8000796 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007a6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80007a8:	f042 0210 	orr.w	r2, r2, #16
 80007ac:	65a2      	str	r2, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80007b0:	f042 0201 	orr.w	r2, r2, #1
 80007b4:	65e2      	str	r2, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80007b6:	2001      	movs	r0, #1
 80007b8:	e76e      	b.n	8000698 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80007ba:	691a      	ldr	r2, [r3, #16]
 80007bc:	f022 0201 	bic.w	r2, r2, #1
 80007c0:	e7c2      	b.n	8000748 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	65a3      	str	r3, [r4, #88]	; 0x58
    return HAL_ERROR;
 80007ca:	2001      	movs	r0, #1
 80007cc:	e7d2      	b.n	8000774 <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80007ce:	4907      	ldr	r1, [pc, #28]	; (80007ec <HAL_ADC_Init+0x194>)
 80007d0:	6865      	ldr	r5, [r4, #4]
 80007d2:	688a      	ldr	r2, [r1, #8]
 80007d4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80007d8:	432a      	orrs	r2, r5
 80007da:	608a      	str	r2, [r1, #8]
 80007dc:	e774      	b.n	80006c8 <HAL_ADC_Init+0x70>
 80007de:	bf00      	nop
 80007e0:	fff0c007 	.word	0xfff0c007
 80007e4:	001e8480 	.word	0x001e8480
 80007e8:	20000000 	.word	0x20000000
 80007ec:	50040300 	.word	0x50040300

080007f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007f2:	6945      	ldr	r5, [r0, #20]
 80007f4:	2d08      	cmp	r5, #8
{
 80007f6:	4604      	mov	r4, r0
 80007f8:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007fa:	d00a      	beq.n	8000812 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 80007fc:	6803      	ldr	r3, [r0, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	07dd      	lsls	r5, r3, #31
 8000802:	d505      	bpl.n	8000810 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000804:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000806:	f043 0320 	orr.w	r3, r3, #32
 800080a:	6583      	str	r3, [r0, #88]	; 0x58
        return HAL_ERROR;
 800080c:	2001      	movs	r0, #1
 800080e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000810:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000812:	f7ff fee5 	bl	80005e0 <HAL_GetTick>
 8000816:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4215      	tst	r5, r2
 800081e:	d01d      	beq.n	800085c <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000820:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000826:	65a2      	str	r2, [r4, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000828:	68da      	ldr	r2, [r3, #12]
 800082a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800082e:	d10f      	bne.n	8000850 <HAL_ADC_PollForConversion+0x60>
 8000830:	69e2      	ldr	r2, [r4, #28]
 8000832:	b96a      	cbnz	r2, 8000850 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	0711      	lsls	r1, r2, #28
 8000838:	d50a      	bpl.n	8000850 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800083a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800083c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000840:	65a2      	str	r2, [r4, #88]	; 0x58
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000842:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000844:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000846:	bf5e      	ittt	pl
 8000848:	6da2      	ldrpl	r2, [r4, #88]	; 0x58
 800084a:	f042 0201 	orrpl.w	r2, r2, #1
 800084e:	65a2      	strpl	r2, [r4, #88]	; 0x58
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000850:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8000852:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000854:	d114      	bne.n	8000880 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 8000856:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000858:	2000      	movs	r0, #0
}
 800085a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800085c:	1c70      	adds	r0, r6, #1
 800085e:	d0dc      	beq.n	800081a <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000860:	b946      	cbnz	r6, 8000874 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 800086a:	2300      	movs	r3, #0
 800086c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8000870:	2003      	movs	r0, #3
 8000872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000874:	f7ff feb4 	bl	80005e0 <HAL_GetTick>
 8000878:	1bc0      	subs	r0, r0, r7
 800087a:	4286      	cmp	r6, r0
 800087c:	d2cc      	bcs.n	8000818 <HAL_ADC_PollForConversion+0x28>
 800087e:	e7f0      	b.n	8000862 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000880:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8000884:	d1e8      	bne.n	8000858 <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800088c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800088c:	6803      	ldr	r3, [r0, #0]
 800088e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000890:	4770      	bx	lr
	...

08000894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800089a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800089e:	2b01      	cmp	r3, #1
{
 80008a0:	4605      	mov	r5, r0
 80008a2:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80008a4:	f000 818d 	beq.w	8000bc2 <HAL_ADC_ConfigChannel+0x32e>
 80008a8:	2301      	movs	r3, #1
 80008aa:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008ae:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80008b0:	6882      	ldr	r2, [r0, #8]
 80008b2:	0757      	lsls	r7, r2, #29
 80008b4:	f100 817f 	bmi.w	8000bb6 <HAL_ADC_ConfigChannel+0x322>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80008b8:	684b      	ldr	r3, [r1, #4]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d808      	bhi.n	80008d0 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 80008be:	3b02      	subs	r3, #2
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d85c      	bhi.n	800097e <HAL_ADC_ConfigChannel+0xea>
 80008c4:	e8df f003 	tbb	[pc, r3]
 80008c8:	58565402 	.word	0x58565402
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80008cc:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80008ce:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80008d0:	6861      	ldr	r1, [r4, #4]
 80008d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008d6:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80008da:	fab3 f383 	clz	r3, r3
 80008de:	f401 7640 	and.w	r6, r1, #768	; 0x300
 80008e2:	40de      	lsrs	r6, r3
 80008e4:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80008e8:	f001 011f 	and.w	r1, r1, #31
 80008ec:	231f      	movs	r3, #31
 80008ee:	fa03 f201 	lsl.w	r2, r3, r1
 80008f2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80008f6:	ea23 0302 	bic.w	r3, r3, r2
 80008fa:	6822      	ldr	r2, [r4, #0]
 80008fc:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000900:	408a      	lsls	r2, r1
 8000902:	4313      	orrs	r3, r2
 8000904:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000908:	6883      	ldr	r3, [r0, #8]
 800090a:	f013 0f0c 	tst.w	r3, #12
 800090e:	d11e      	bne.n	800094e <HAL_ADC_ConfigChannel+0xba>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000910:	68a2      	ldr	r2, [r4, #8]
 8000912:	6821      	ldr	r1, [r4, #0]
 8000914:	f7ff fe78 	bl	8000608 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000918:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800091a:	f8d5 e000 	ldr.w	lr, [r5]
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000924:	2e04      	cmp	r6, #4
 8000926:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800092a:	d02a      	beq.n	8000982 <HAL_ADC_ConfigChannel+0xee>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800092c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8000930:	0048      	lsls	r0, r1, #1
 8000932:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8000934:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8000938:	4081      	lsls	r1, r0
 800093a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093e:	4319      	orrs	r1, r3
 8000940:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8000944:	4bc6      	ldr	r3, [pc, #792]	; (8000c60 <HAL_ADC_ConfigChannel+0x3cc>)
 8000946:	4003      	ands	r3, r0
 8000948:	4319      	orrs	r1, r3
 800094a:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800094e:	6828      	ldr	r0, [r5, #0]
 8000950:	6883      	ldr	r3, [r0, #8]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	2b01      	cmp	r3, #1
 8000958:	f040 8135 	bne.w	8000bc6 <HAL_ADC_ConfigChannel+0x332>
 800095c:	6803      	ldr	r3, [r0, #0]
 800095e:	07de      	lsls	r6, r3, #31
 8000960:	f140 8131 	bpl.w	8000bc6 <HAL_ADC_ConfigChannel+0x332>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000964:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000966:	2300      	movs	r3, #0
 8000968:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
}
 800096c:	b003      	add	sp, #12
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000970:	2312      	movs	r3, #18
 8000972:	e7ac      	b.n	80008ce <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000974:	2318      	movs	r3, #24
 8000976:	e7aa      	b.n	80008ce <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097c:	e7a7      	b.n	80008ce <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 800097e:	2306      	movs	r3, #6
 8000980:	e7a5      	b.n	80008ce <HAL_ADC_ConfigChannel+0x3a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000982:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000986:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800098a:	f3c1 6784 	ubfx	r7, r1, #26, #5
 800098e:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 8000992:	2800      	cmp	r0, #0
 8000994:	d13a      	bne.n	8000a0c <HAL_ADC_ConfigChannel+0x178>
 8000996:	f3c3 6084 	ubfx	r0, r3, #26, #5
 800099a:	4287      	cmp	r7, r0
 800099c:	f040 814c 	bne.w	8000c38 <HAL_ADC_ConfigChannel+0x3a4>
  MODIFY_REG(*preg,
 80009a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009a4:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009a8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009aa:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 80009ae:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80009b2:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80009b6:	bb9f      	cbnz	r7, 8000a20 <HAL_ADC_ConfigChannel+0x18c>
 80009b8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80009bc:	4283      	cmp	r3, r0
 80009be:	f040 8140 	bne.w	8000c42 <HAL_ADC_ConfigChannel+0x3ae>
  MODIFY_REG(*preg,
 80009c2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009c6:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009c8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009ca:	6891      	ldr	r1, [r2, #8]
 80009cc:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009d0:	f102 0608 	add.w	r6, r2, #8
 80009d4:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80009d8:	bb77      	cbnz	r7, 8000a38 <HAL_ADC_ConfigChannel+0x1a4>
 80009da:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80009de:	4298      	cmp	r0, r3
 80009e0:	f040 8136 	bne.w	8000c50 <HAL_ADC_ConfigChannel+0x3bc>
  MODIFY_REG(*preg,
 80009e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009e8:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009ea:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009ec:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009f0:	68d2      	ldr	r2, [r2, #12]
 80009f2:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80009f6:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80009fa:	bb4e      	cbnz	r6, 8000a50 <HAL_ADC_ConfigChannel+0x1bc>
 80009fc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000a00:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8000a02:	bf04      	itt	eq
 8000a04:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a08:	6002      	streq	r2, [r0, #0]
 8000a0a:	e7a0      	b.n	800094e <HAL_ADC_ConfigChannel+0xba>
 8000a0c:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a10:	fab0 f080 	clz	r0, r0
 8000a14:	4287      	cmp	r7, r0
 8000a16:	d0c3      	beq.n	80009a0 <HAL_ADC_ConfigChannel+0x10c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a18:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a1c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000a20:	fa93 f3a3 	rbit	r3, r3
 8000a24:	fab3 f383 	clz	r3, r3
 8000a28:	4283      	cmp	r3, r0
 8000a2a:	d0ca      	beq.n	80009c2 <HAL_ADC_ConfigChannel+0x12e>
 8000a2c:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a2e:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a30:	f102 0608 	add.w	r6, r2, #8
 8000a34:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000a38:	fa93 f3a3 	rbit	r3, r3
 8000a3c:	fab3 f383 	clz	r3, r3
 8000a40:	4283      	cmp	r3, r0
 8000a42:	d0cf      	beq.n	80009e4 <HAL_ADC_ConfigChannel+0x150>
 8000a44:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a48:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000a50:	fa93 f3a3 	rbit	r3, r3
 8000a54:	fab3 f383 	clz	r3, r3
 8000a58:	e7d2      	b.n	8000a00 <HAL_ADC_ConfigChannel+0x16c>
 8000a5a:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8000a5e:	fab2 f282 	clz	r2, r2
 8000a62:	3201      	adds	r2, #1
 8000a64:	2a09      	cmp	r2, #9
 8000a66:	d859      	bhi.n	8000b1c <HAL_ADC_ConfigChannel+0x288>
 8000a68:	fa93 f2a3 	rbit	r2, r3
 8000a6c:	fab2 f282 	clz	r2, r2
 8000a70:	3201      	adds	r2, #1
 8000a72:	0692      	lsls	r2, r2, #26
 8000a74:	fa93 f1a3 	rbit	r1, r3
 8000a78:	fab1 f181 	clz	r1, r1
 8000a7c:	1c4e      	adds	r6, r1, #1
 8000a7e:	2101      	movs	r1, #1
 8000a80:	40b1      	lsls	r1, r6
 8000a82:	e001      	b.n	8000a88 <HAL_ADC_ConfigChannel+0x1f4>
 8000a84:	fa01 f10e 	lsl.w	r1, r1, lr
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d140      	bne.n	8000b10 <HAL_ADC_ConfigChannel+0x27c>
 8000a8e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000a92:	1c59      	adds	r1, r3, #1
 8000a94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000a98:	0509      	lsls	r1, r1, #20
 8000a9a:	4311      	orrs	r1, r2
 8000a9c:	68a2      	ldr	r2, [r4, #8]
 8000a9e:	f7ff fdb3 	bl	8000608 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000aa2:	6822      	ldr	r2, [r4, #0]
 8000aa4:	4b6f      	ldr	r3, [pc, #444]	; (8000c64 <HAL_ADC_ConfigChannel+0x3d0>)
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d14b      	bne.n	8000b42 <HAL_ADC_ConfigChannel+0x2ae>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000aaa:	4b6f      	ldr	r3, [pc, #444]	; (8000c68 <HAL_ADC_ConfigChannel+0x3d4>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000ab2:	f47f af57 	bne.w	8000964 <HAL_ADC_ConfigChannel+0xd0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000ab6:	682b      	ldr	r3, [r5, #0]
 8000ab8:	6898      	ldr	r0, [r3, #8]
 8000aba:	f000 0003 	and.w	r0, r0, #3
 8000abe:	2801      	cmp	r0, #1
 8000ac0:	d103      	bne.n	8000aca <HAL_ADC_ConfigChannel+0x236>
 8000ac2:	6819      	ldr	r1, [r3, #0]
 8000ac4:	07c9      	lsls	r1, r1, #31
 8000ac6:	f100 80b2 	bmi.w	8000c2e <HAL_ADC_ConfigChannel+0x39a>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000aca:	4966      	ldr	r1, [pc, #408]	; (8000c64 <HAL_ADC_ConfigChannel+0x3d0>)
 8000acc:	428a      	cmp	r2, r1
 8000ace:	d149      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x2d0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8000ad0:	4a66      	ldr	r2, [pc, #408]	; (8000c6c <HAL_ADC_ConfigChannel+0x3d8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	f47f af46 	bne.w	8000964 <HAL_ADC_ConfigChannel+0xd0>
 8000ad8:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000adc:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ae0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ae4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000ae8:	430b      	orrs	r3, r1
 8000aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000aee:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8000af2:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <HAL_ADC_ConfigChannel+0x3dc>)
 8000af4:	4a5f      	ldr	r2, [pc, #380]	; (8000c74 <HAL_ADC_ConfigChannel+0x3e0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000afc:	2378      	movs	r3, #120	; 0x78
 8000afe:	4353      	muls	r3, r2
                wait_loop_index--;
 8000b00:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8000b02:	9b01      	ldr	r3, [sp, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f43f af2d 	beq.w	8000964 <HAL_ADC_ConfigChannel+0xd0>
                wait_loop_index--;
 8000b0a:	9b01      	ldr	r3, [sp, #4]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	e7f7      	b.n	8000b00 <HAL_ADC_ConfigChannel+0x26c>
 8000b10:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8000b14:	fab1 f181 	clz	r1, r1
 8000b18:	3101      	adds	r1, #1
 8000b1a:	e7bb      	b.n	8000a94 <HAL_ADC_ConfigChannel+0x200>
 8000b1c:	fa93 f2a3 	rbit	r2, r3
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	3201      	adds	r2, #1
 8000b26:	0696      	lsls	r6, r2, #26
 8000b28:	fa93 f1a3 	rbit	r1, r3
 8000b2c:	fab1 f181 	clz	r1, r1
 8000b30:	1c4a      	adds	r2, r1, #1
 8000b32:	2101      	movs	r1, #1
 8000b34:	4091      	lsls	r1, r2
 8000b36:	e06c      	b.n	8000c12 <HAL_ADC_ConfigChannel+0x37e>
 8000b38:	fa93 f3a3 	rbit	r3, r3
 8000b3c:	fab3 f383 	clz	r3, r3
 8000b40:	e06d      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x38a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 8000b42:	4b4d      	ldr	r3, [pc, #308]	; (8000c78 <HAL_ADC_ConfigChannel+0x3e4>)
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d104      	bne.n	8000b52 <HAL_ADC_ConfigChannel+0x2be>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b48:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <HAL_ADC_ConfigChannel+0x3d4>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000b4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000b50:	e7af      	b.n	8000ab2 <HAL_ADC_ConfigChannel+0x21e>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8000b52:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <HAL_ADC_ConfigChannel+0x3e8>)
 8000b54:	429a      	cmp	r2, r3
 8000b56:	f47f af05 	bne.w	8000964 <HAL_ADC_ConfigChannel+0xd0>
 8000b5a:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <HAL_ADC_ConfigChannel+0x3d4>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000b5e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000b62:	e7a6      	b.n	8000ab2 <HAL_ADC_ConfigChannel+0x21e>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000b64:	4944      	ldr	r1, [pc, #272]	; (8000c78 <HAL_ADC_ConfigChannel+0x3e4>)
 8000b66:	428a      	cmp	r2, r1
 8000b68:	d111      	bne.n	8000b8e <HAL_ADC_ConfigChannel+0x2fa>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000b6a:	4a40      	ldr	r2, [pc, #256]	; (8000c6c <HAL_ADC_ConfigChannel+0x3d8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	f47f aef9 	bne.w	8000964 <HAL_ADC_ConfigChannel+0xd0>
 8000b72:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b76:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b7a:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b7e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000b82:	430b      	orrs	r3, r1
 8000b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b88:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8000b8c:	e6ea      	b.n	8000964 <HAL_ADC_ConfigChannel+0xd0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000b8e:	493b      	ldr	r1, [pc, #236]	; (8000c7c <HAL_ADC_ConfigChannel+0x3e8>)
 8000b90:	428a      	cmp	r2, r1
 8000b92:	f47f aee7 	bne.w	8000964 <HAL_ADC_ConfigChannel+0xd0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000b96:	4a35      	ldr	r2, [pc, #212]	; (8000c6c <HAL_ADC_ConfigChannel+0x3d8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	f47f aee3 	bne.w	8000964 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b9e:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ba2:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ba6:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000baa:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb4:	e7e8      	b.n	8000b88 <HAL_ADC_ConfigChannel+0x2f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8000bb8:	f042 0220 	orr.w	r2, r2, #32
 8000bbc:	65aa      	str	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	e6d1      	b.n	8000966 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_LOCK(hadc);
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	e6d2      	b.n	800096c <HAL_ADC_ConfigChannel+0xd8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000bc6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000bc8:	4a2d      	ldr	r2, [pc, #180]	; (8000c80 <HAL_ADC_ConfigChannel+0x3ec>)
 8000bca:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	f001 0e20 	and.w	lr, r1, #32
 8000bd4:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bd8:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000bdc:	4072      	eors	r2, r6
 8000bde:	403a      	ands	r2, r7
 8000be0:	4072      	eors	r2, r6
 8000be2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000be6:	4a27      	ldr	r2, [pc, #156]	; (8000c84 <HAL_ADC_ConfigChannel+0x3f0>)
 8000be8:	4291      	cmp	r1, r2
 8000bea:	f47f af5a 	bne.w	8000aa2 <HAL_ADC_ConfigChannel+0x20e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	f47f af33 	bne.w	8000a5a <HAL_ADC_ConfigChannel+0x1c6>
 8000bf4:	f3c3 6184 	ubfx	r1, r3, #26, #5
 8000bf8:	f101 0e01 	add.w	lr, r1, #1
 8000bfc:	f1be 0f09 	cmp.w	lr, #9
 8000c00:	f04f 0101 	mov.w	r1, #1
 8000c04:	ea4f 628e 	mov.w	r2, lr, lsl #26
 8000c08:	f67f af3c 	bls.w	8000a84 <HAL_ADC_ConfigChannel+0x1f0>
 8000c0c:	4616      	mov	r6, r2
 8000c0e:	fa01 f10e 	lsl.w	r1, r1, lr
 8000c12:	ea41 0206 	orr.w	r2, r1, r6
 8000c16:	2f00      	cmp	r7, #0
 8000c18:	d18e      	bne.n	8000b38 <HAL_ADC_ConfigChannel+0x2a4>
 8000c1a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000c1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c22:	f1a3 011b 	sub.w	r1, r3, #27
 8000c26:	0509      	lsls	r1, r1, #20
 8000c28:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000c2c:	e735      	b.n	8000a9a <HAL_ADC_ConfigChannel+0x206>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c2e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	65ab      	str	r3, [r5, #88]	; 0x58
 8000c36:	e696      	b.n	8000966 <HAL_ADC_ConfigChannel+0xd2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c38:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c3c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000c40:	e6ba      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x124>
 8000c42:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c44:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c46:	f102 0608 	add.w	r6, r2, #8
 8000c4a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000c4e:	e6c4      	b.n	80009da <HAL_ADC_ConfigChannel+0x146>
 8000c50:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c54:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000c5c:	e6ce      	b.n	80009fc <HAL_ADC_ConfigChannel+0x168>
 8000c5e:	bf00      	nop
 8000c60:	03fff000 	.word	0x03fff000
 8000c64:	c7520000 	.word	0xc7520000
 8000c68:	50040300 	.word	0x50040300
 8000c6c:	50040000 	.word	0x50040000
 8000c70:	20000000 	.word	0x20000000
 8000c74:	001e8480 	.word	0x001e8480
 8000c78:	cb840000 	.word	0xcb840000
 8000c7c:	80000001 	.word	0x80000001
 8000c80:	0007ffff 	.word	0x0007ffff
 8000c84:	407f0000 	.word	0x407f0000

08000c88 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000c88:	6803      	ldr	r3, [r0, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	f012 0f0c 	tst.w	r2, #12
{
 8000c90:	b570      	push	{r4, r5, r6, lr}
 8000c92:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000c94:	d101      	bne.n	8000c9a <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c96:	2000      	movs	r0, #0
 8000c98:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	0190      	lsls	r0, r2, #6
 8000c9e:	d52a      	bpl.n	8000cf6 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8000ca0:	69e2      	ldr	r2, [r4, #28]
 8000ca2:	2a01      	cmp	r2, #1
 8000ca4:	d127      	bne.n	8000cf6 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8000ca6:	69a2      	ldr	r2, [r4, #24]
 8000ca8:	2a01      	cmp	r2, #1
 8000caa:	d124      	bne.n	8000cf6 <ADC_ConversionStop+0x6e>
 8000cac:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8000cae:	6819      	ldr	r1, [r3, #0]
 8000cb0:	0649      	lsls	r1, r1, #25
 8000cb2:	d514      	bpl.n	8000cde <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000cb4:	2240      	movs	r2, #64	; 0x40
 8000cb6:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8000cb8:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	0756      	lsls	r6, r2, #29
 8000cbe:	d50a      	bpl.n	8000cd6 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8000cc0:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000cc2:	0795      	lsls	r5, r2, #30
 8000cc4:	d407      	bmi.n	8000cd6 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ccc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000cd0:	f042 0210 	orr.w	r2, r2, #16
 8000cd4:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8000cd6:	2901      	cmp	r1, #1
 8000cd8:	d10f      	bne.n	8000cfa <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8000cda:	2504      	movs	r5, #4
        break;
 8000cdc:	e01e      	b.n	8000d1c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 8000cde:	3a01      	subs	r2, #1
 8000ce0:	d1e5      	bne.n	8000cae <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ce4:	f043 0310 	orr.w	r3, r3, #16
 8000ce8:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8000cf6:	2902      	cmp	r1, #2
 8000cf8:	d1df      	bne.n	8000cba <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	0710      	lsls	r0, r2, #28
 8000cfe:	d506      	bpl.n	8000d0e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000d00:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000d02:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8000d04:	bf5e      	ittt	pl
 8000d06:	689a      	ldrpl	r2, [r3, #8]
 8000d08:	f042 0220 	orrpl.w	r2, r2, #32
 8000d0c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 8000d0e:	2902      	cmp	r1, #2
 8000d10:	d003      	beq.n	8000d1a <ADC_ConversionStop+0x92>
 8000d12:	2903      	cmp	r1, #3
 8000d14:	d1e1      	bne.n	8000cda <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000d16:	250c      	movs	r5, #12
 8000d18:	e000      	b.n	8000d1c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000d1a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 8000d1c:	f7ff fc60 	bl	80005e0 <HAL_GetTick>
 8000d20:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	421d      	tst	r5, r3
 8000d28:	d0b5      	beq.n	8000c96 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000d2a:	f7ff fc59 	bl	80005e0 <HAL_GetTick>
 8000d2e:	1b80      	subs	r0, r0, r6
 8000d30:	2805      	cmp	r0, #5
 8000d32:	d9f6      	bls.n	8000d22 <ADC_ConversionStop+0x9a>
 8000d34:	e7d5      	b.n	8000ce2 <ADC_ConversionStop+0x5a>
 8000d36:	bf00      	nop
 8000d38:	0a340001 	.word	0x0a340001

08000d3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8000d3e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d40:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 8000d42:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d44:	6893      	ldr	r3, [r2, #8]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b01      	cmp	r3, #1
{
 8000d4c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d4e:	d108      	bne.n	8000d62 <ADC_Enable+0x26>
 8000d50:	6813      	ldr	r3, [r2, #0]
 8000d52:	07d8      	lsls	r0, r3, #31
 8000d54:	d505      	bpl.n	8000d62 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000d56:	2000      	movs	r0, #0
}
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8000d5c:	9b01      	ldr	r3, [sp, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	e012      	b.n	8000d88 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000d62:	6891      	ldr	r1, [r2, #8]
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <ADC_Enable+0x94>)
 8000d66:	4219      	tst	r1, r3
 8000d68:	d127      	bne.n	8000dba <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 8000d6a:	6893      	ldr	r3, [r2, #8]
 8000d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <ADC_Enable+0x98>)
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <ADC_Enable+0x9c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d84:	230a      	movs	r3, #10
 8000d86:	4353      	muls	r3, r2
      wait_loop_index--;
 8000d88:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000d8a:	9b01      	ldr	r3, [sp, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1e5      	bne.n	8000d5c <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 8000d90:	f7ff fc26 	bl	80005e0 <HAL_GetTick>
 8000d94:	4e11      	ldr	r6, [pc, #68]	; (8000ddc <ADC_Enable+0xa0>)
 8000d96:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	07db      	lsls	r3, r3, #31
 8000d9e:	d4da      	bmi.n	8000d56 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8000da0:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8000da2:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8000da4:	bf5f      	itttt	pl
 8000da6:	6893      	ldrpl	r3, [r2, #8]
 8000da8:	4033      	andpl	r3, r6
 8000daa:	f043 0301 	orrpl.w	r3, r3, #1
 8000dae:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000db0:	f7ff fc16 	bl	80005e0 <HAL_GetTick>
 8000db4:	1b40      	subs	r0, r0, r5
 8000db6:	2802      	cmp	r0, #2
 8000db8:	d9ee      	bls.n	8000d98 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8000dca:	2001      	movs	r0, #1
 8000dcc:	e7c4      	b.n	8000d58 <ADC_Enable+0x1c>
 8000dce:	bf00      	nop
 8000dd0:	8000003f 	.word	0x8000003f
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	001e8480 	.word	0x001e8480
 8000ddc:	7fffffc0 	.word	0x7fffffc0

08000de0 <HAL_ADC_Start>:
{
 8000de0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000de2:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000de4:	689d      	ldr	r5, [r3, #8]
 8000de6:	f015 0504 	ands.w	r5, r5, #4
{
 8000dea:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dec:	d13a      	bne.n	8000e64 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 8000dee:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d036      	beq.n	8000e64 <HAL_ADC_Start+0x84>
 8000df6:	2301      	movs	r3, #1
 8000df8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8000dfc:	f7ff ff9e 	bl	8000d3c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d12c      	bne.n	8000e5e <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8000e04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	65a3      	str	r3, [r4, #88]	; 0x58
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000e1a:	65a3      	str	r3, [r4, #88]	; 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e1e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e20:	bf48      	it	mi
 8000e22:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e24:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8000e26:	bf52      	itee	pl
 8000e28:	65e0      	strpl	r0, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e2a:	f023 0306 	bicmi.w	r3, r3, #6
 8000e2e:	65e3      	strmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e30:	231c      	movs	r3, #28
 8000e32:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8000e34:	2300      	movs	r3, #0
 8000e36:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e3a:	68d3      	ldr	r3, [r2, #12]
 8000e3c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e3e:	bf41      	itttt	mi
 8000e40:	6da3      	ldrmi	r3, [r4, #88]	; 0x58
 8000e42:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8000e46:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8000e4a:	65a3      	strmi	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 8000e4c:	6893      	ldr	r3, [r2, #8]
 8000e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6093      	str	r3, [r2, #8]
 8000e5c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8000e5e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8000e62:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8000e64:	2002      	movs	r0, #2
}
 8000e66:	bd38      	pop	{r3, r4, r5, pc}

08000e68 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e68:	6802      	ldr	r2, [r0, #0]
{
 8000e6a:	b538      	push	{r3, r4, r5, lr}
 8000e6c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e6e:	6890      	ldr	r0, [r2, #8]
 8000e70:	f000 0003 	and.w	r0, r0, #3
 8000e74:	2801      	cmp	r0, #1
 8000e76:	d001      	beq.n	8000e7c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e78:	2000      	movs	r0, #0
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e7c:	6813      	ldr	r3, [r2, #0]
 8000e7e:	07d9      	lsls	r1, r3, #31
 8000e80:	d5fa      	bpl.n	8000e78 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000e82:	6893      	ldr	r3, [r2, #8]
 8000e84:	f003 030d 	and.w	r3, r3, #13
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d11f      	bne.n	8000ecc <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 8000e8c:	6893      	ldr	r3, [r2, #8]
 8000e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000ea0:	f7ff fb9e 	bl	80005e0 <HAL_GetTick>
 8000ea4:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	07db      	lsls	r3, r3, #31
 8000eac:	d5e4      	bpl.n	8000e78 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eae:	f7ff fb97 	bl	80005e0 <HAL_GetTick>
 8000eb2:	1b40      	subs	r0, r0, r5
 8000eb4:	2802      	cmp	r0, #2
 8000eb6:	d9f6      	bls.n	8000ea6 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
 8000eca:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ece:	f043 0310 	orr.w	r3, r3, #16
 8000ed2:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8000edc:	bd38      	pop	{r3, r4, r5, pc}

08000ede <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000ede:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8000ee2:	2b01      	cmp	r3, #1
{
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000ee8:	d016      	beq.n	8000f18 <HAL_ADC_Stop+0x3a>
 8000eea:	2301      	movs	r3, #1
 8000eec:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	f7ff fec9 	bl	8000c88 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000ef6:	b958      	cbnz	r0, 8000f10 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f7ff ffb5 	bl	8000e68 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000efe:	b938      	cbnz	r0, 8000f10 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8000f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8000f10:	2300      	movs	r3, #0
 8000f12:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  return tmp_hal_status;
 8000f16:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000f18:	2002      	movs	r0, #2
}
 8000f1a:	bd10      	pop	{r4, pc}

08000f1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f1e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f24:	041b      	lsls	r3, r3, #16
 8000f26:	0c1b      	lsrs	r3, r3, #16
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f2c:	0200      	lsls	r0, r0, #8
 8000f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f32:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f36:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f38:	60d3      	str	r3, [r2, #12]
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f42:	b530      	push	{r4, r5, lr}
 8000f44:	68dc      	ldr	r4, [r3, #12]
 8000f46:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	bf28      	it	cs
 8000f54:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 0501 	mov.w	r5, #1
 8000f5c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f60:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f64:	bf8c      	ite	hi
 8000f66:	3c03      	subhi	r4, #3
 8000f68:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6a:	4019      	ands	r1, r3
 8000f6c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6e:	fa05 f404 	lsl.w	r4, r5, r4
 8000f72:	3c01      	subs	r4, #1
 8000f74:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f76:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	ea42 0201 	orr.w	r2, r2, r1
 8000f7c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	bfaf      	iteee	ge
 8000f82:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	f000 000f 	andlt.w	r0, r0, #15
 8000f8a:	4b06      	ldrlt	r3, [pc, #24]	; (8000fa4 <HAL_NVIC_SetPriority+0x64>)
 8000f8c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	bfa5      	ittet	ge
 8000f90:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000f94:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f9c:	bd30      	pop	{r4, r5, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	e000ed14 	.word	0xe000ed14

08000fa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	3801      	subs	r0, #1
 8000faa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fae:	d20a      	bcs.n	8000fc6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	21f0      	movs	r1, #240	; 0xf0
 8000fb8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fd6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fd8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fda:	bf0c      	ite	eq
 8000fdc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fe0:	f022 0204 	bicne.w	r2, r2, #4
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fec:	4770      	bx	lr

08000fee <HAL_SYSTICK_IRQHandler>:
{
 8000fee:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ff0:	f7ff fffc 	bl	8000fec <HAL_SYSTICK_Callback>
 8000ff4:	bd08      	pop	{r3, pc}
	...

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ffc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ffe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800115c <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001004:	4a53      	ldr	r2, [pc, #332]	; (8001154 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001006:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001008:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 800100c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800100e:	9c01      	ldr	r4, [sp, #4]
 8001010:	40dc      	lsrs	r4, r3
 8001012:	d102      	bne.n	800101a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8001014:	b005      	add	sp, #20
 8001016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800101a:	2401      	movs	r4, #1
 800101c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001020:	9c01      	ldr	r4, [sp, #4]
 8001022:	ea14 050a 	ands.w	r5, r4, sl
 8001026:	f000 808f 	beq.w	8001148 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102a:	684c      	ldr	r4, [r1, #4]
 800102c:	f024 0b10 	bic.w	fp, r4, #16
 8001030:	f1bb 0f02 	cmp.w	fp, #2
 8001034:	d111      	bne.n	800105a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001036:	08df      	lsrs	r7, r3, #3
 8001038:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800103c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001040:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001042:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001046:	fa09 fc0e 	lsl.w	ip, r9, lr
 800104a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800104e:	690e      	ldr	r6, [r1, #16]
 8001050:	fa06 f60e 	lsl.w	r6, r6, lr
 8001054:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8001058:	623e      	str	r6, [r7, #32]
 800105a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800105e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001060:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001062:	fa07 f70c 	lsl.w	r7, r7, ip
 8001066:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001068:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800106c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800106e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001072:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001076:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800107e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001080:	d811      	bhi.n	80010a6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001082:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001084:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001088:	68ce      	ldr	r6, [r1, #12]
 800108a:	fa06 fe0c 	lsl.w	lr, r6, ip
 800108e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001092:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001094:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800109a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800109e:	409e      	lsls	r6, r3
 80010a0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80010a4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80010a6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80010a8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010aa:	688e      	ldr	r6, [r1, #8]
 80010ac:	fa06 f60c 	lsl.w	r6, r6, ip
 80010b0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80010b4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b6:	d547      	bpl.n	8001148 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010bc:	f046 0601 	orr.w	r6, r6, #1
 80010c0:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80010c4:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010c8:	f023 0703 	bic.w	r7, r3, #3
 80010cc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010d0:	f006 0601 	and.w	r6, r6, #1
 80010d4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80010d8:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010da:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80010e0:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010e6:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80010ea:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010ee:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80010f2:	d02b      	beq.n	800114c <HAL_GPIO_Init+0x154>
 80010f4:	4e18      	ldr	r6, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x160>)
 80010f6:	42b0      	cmp	r0, r6
 80010f8:	d02a      	beq.n	8001150 <HAL_GPIO_Init+0x158>
 80010fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010fe:	42b0      	cmp	r0, r6
 8001100:	bf14      	ite	ne
 8001102:	2607      	movne	r6, #7
 8001104:	2602      	moveq	r6, #2
 8001106:	fa06 f60e 	lsl.w	r6, r6, lr
 800110a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800110e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001110:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001112:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001114:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001118:	bf0c      	ite	eq
 800111a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800111c:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800111e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8001120:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001122:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001126:	bf0c      	ite	eq
 8001128:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800112a:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800112c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 800112e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001130:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001134:	bf0c      	ite	eq
 8001136:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001138:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800113a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 800113c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001140:	bf54      	ite	pl
 8001142:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001144:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8001146:	60d6      	str	r6, [r2, #12]
    position++;
 8001148:	3301      	adds	r3, #1
 800114a:	e760      	b.n	800100e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800114c:	2600      	movs	r6, #0
 800114e:	e7da      	b.n	8001106 <HAL_GPIO_Init+0x10e>
 8001150:	2601      	movs	r6, #1
 8001152:	e7d8      	b.n	8001106 <HAL_GPIO_Init+0x10e>
 8001154:	40010400 	.word	0x40010400
 8001158:	48000400 	.word	0x48000400
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	b10a      	cbz	r2, 8001166 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	6181      	str	r1, [r0, #24]
 8001164:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	6281      	str	r1, [r0, #40]	; 0x28
 8001168:	4770      	bx	lr
	...

0800116c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 800116c:	4a02      	ldr	r2, [pc, #8]	; (8001178 <HAL_PWR_EnableBkUpAccess+0xc>)
 800116e:	6813      	ldr	r3, [r2, #0]
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4770      	bx	lr
 8001178:	40007000 	.word	0x40007000

0800117c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800117c:	4b02      	ldr	r3, [pc, #8]	; (8001188 <HAL_PWREx_GetVoltageRange+0xc>)
 800117e:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001180:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800118e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001190:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001198:	d11a      	bne.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800119a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800119e:	d013      	beq.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80011a2:	4912      	ldr	r1, [pc, #72]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80011a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ac:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011b6:	2232      	movs	r2, #50	; 0x32
 80011b8:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80011ba:	b112      	cbz	r2, 80011c2 <HAL_PWREx_ControlVoltageScaling+0x36>
 80011bc:	6959      	ldr	r1, [r3, #20]
 80011be:	0549      	lsls	r1, r1, #21
 80011c0:	d404      	bmi.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	055b      	lsls	r3, r3, #21
 80011c6:	d40d      	bmi.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 80011c8:	2000      	movs	r0, #0
 80011ca:	4770      	bx	lr
        wait_loop_index--;
 80011cc:	3a01      	subs	r2, #1
 80011ce:	e7f4      	b.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011d0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d4:	bf1f      	itttt	ne
 80011d6:	681a      	ldrne	r2, [r3, #0]
 80011d8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80011dc:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80011e0:	601a      	strne	r2, [r3, #0]
 80011e2:	e7f1      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 80011e4:	2003      	movs	r0, #3
}  
 80011e6:	4770      	bx	lr
 80011e8:	40007000 	.word	0x40007000
 80011ec:	000f4240 	.word	0x000f4240
 80011f0:	20000000 	.word	0x20000000

080011f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80011f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80011f6:	4d1e      	ldr	r5, [pc, #120]	; (8001270 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80011f8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80011fa:	00da      	lsls	r2, r3, #3
{
 80011fc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80011fe:	d518      	bpl.n	8001232 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001200:	f7ff ffbc 	bl	800117c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001204:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001208:	d123      	bne.n	8001252 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800120a:	2c80      	cmp	r4, #128	; 0x80
 800120c:	d929      	bls.n	8001262 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800120e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001210:	bf8c      	ite	hi
 8001212:	2002      	movhi	r0, #2
 8001214:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001218:	6813      	ldr	r3, [r2, #0]
 800121a:	f023 0307 	bic.w	r3, r3, #7
 800121e:	4303      	orrs	r3, r0
 8001220:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001228:	1a18      	subs	r0, r3, r0
 800122a:	bf18      	it	ne
 800122c:	2001      	movne	r0, #1
 800122e:	b003      	add	sp, #12
 8001230:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	65ab      	str	r3, [r5, #88]	; 0x58
 800123a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001244:	f7ff ff9a 	bl	800117c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001248:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800124a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800124e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001250:	e7d8      	b.n	8001204 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001252:	2c80      	cmp	r4, #128	; 0x80
 8001254:	d807      	bhi.n	8001266 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001256:	d008      	beq.n	800126a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001258:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800125c:	4258      	negs	r0, r3
 800125e:	4158      	adcs	r0, r3
 8001260:	e7d9      	b.n	8001216 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001262:	2000      	movs	r0, #0
 8001264:	e7d7      	b.n	8001216 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001266:	2003      	movs	r0, #3
 8001268:	e7d5      	b.n	8001216 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800126a:	2002      	movs	r0, #2
 800126c:	e7d3      	b.n	8001216 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	40022000 	.word	0x40022000

08001278 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001278:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_RCC_GetSysClockFreq+0xc0>)
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	f012 0f0c 	tst.w	r2, #12
{
 8001280:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001282:	d009      	beq.n	8001298 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800128a:	2a0c      	cmp	r2, #12
 800128c:	d12d      	bne.n	80012ea <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	2a01      	cmp	r2, #1
 8001296:	d128      	bne.n	80012ea <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001298:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800129a:	4928      	ldr	r1, [pc, #160]	; (800133c <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800129c:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800129e:	bf55      	itete	pl
 80012a0:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80012a4:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80012a6:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80012aa:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80012ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80012b2:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 80012b4:	f011 0f0c 	tst.w	r1, #12
 80012b8:	bf0c      	ite	eq
 80012ba:	4610      	moveq	r0, r2
 80012bc:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80012be:	6899      	ldr	r1, [r3, #8]
 80012c0:	f001 010c 	and.w	r1, r1, #12
 80012c4:	290c      	cmp	r1, #12
 80012c6:	d130      	bne.n	800132a <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80012c8:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80012ca:	68d8      	ldr	r0, [r3, #12]
 80012cc:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80012d0:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80012d2:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 80012d6:	2802      	cmp	r0, #2
 80012d8:	d019      	beq.n	800130e <HAL_RCC_GetSysClockFreq+0x96>
 80012da:	2803      	cmp	r0, #3
 80012dc:	d026      	beq.n	800132c <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80012de:	fbb2 f2f1 	udiv	r2, r2, r1
 80012e2:	68d8      	ldr	r0, [r3, #12]
 80012e4:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80012e8:	e017      	b.n	800131a <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	f002 020c 	and.w	r2, r2, #12
 80012f0:	2a04      	cmp	r2, #4
 80012f2:	d007      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	f002 020c 	and.w	r2, r2, #12
 80012fa:	2a08      	cmp	r2, #8
 80012fc:	d104      	bne.n	8001308 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001300:	2200      	movs	r2, #0
 8001302:	e7dc      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001304:	480f      	ldr	r0, [pc, #60]	; (8001344 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001306:	e7fb      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001308:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800130a:	4602      	mov	r2, r0
 800130c:	e7d7      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001312:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001316:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001320:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001322:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001324:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001326:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800132a:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001330:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001334:	e7ef      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x9e>
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	08003184 	.word	0x08003184
 8001340:	007a1200 	.word	0x007a1200
 8001344:	00f42400 	.word	0x00f42400

08001348 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001348:	6803      	ldr	r3, [r0, #0]
{
 800134a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800134e:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001350:	06d8      	lsls	r0, r3, #27
 8001352:	d539      	bpl.n	80013c8 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001354:	4cab      	ldr	r4, [pc, #684]	; (8001604 <HAL_RCC_OscConfig+0x2bc>)
 8001356:	68a3      	ldr	r3, [r4, #8]
 8001358:	f013 0f0c 	tst.w	r3, #12
 800135c:	d162      	bne.n	8001424 <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	0799      	lsls	r1, r3, #30
 8001362:	d503      	bpl.n	800136c <HAL_RCC_OscConfig+0x24>
 8001364:	69ab      	ldr	r3, [r5, #24]
 8001366:	b90b      	cbnz	r3, 800136c <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
 800136a:	e07f      	b.n	800146c <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	6a28      	ldr	r0, [r5, #32]
 8001370:	071a      	lsls	r2, r3, #28
 8001372:	bf56      	itet	pl
 8001374:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001378:	6823      	ldrmi	r3, [r4, #0]
 800137a:	091b      	lsrpl	r3, r3, #4
 800137c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001380:	4283      	cmp	r3, r0
 8001382:	d23a      	bcs.n	80013fa <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001384:	f7ff ff36 	bl	80011f4 <RCC_SetFlashLatencyFromMSIRange>
 8001388:	2800      	cmp	r0, #0
 800138a:	d1ed      	bne.n	8001368 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	6823      	ldr	r3, [r4, #0]
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6023      	str	r3, [r4, #0]
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	6a2a      	ldr	r2, [r5, #32]
 8001398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800139c:	4313      	orrs	r3, r2
 800139e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a0:	6863      	ldr	r3, [r4, #4]
 80013a2:	69ea      	ldr	r2, [r5, #28]
 80013a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80013a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80013ac:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ae:	f7ff ff63 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 80013b2:	68a3      	ldr	r3, [r4, #8]
 80013b4:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_RCC_OscConfig+0x2c0>)
 80013b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	40d8      	lsrs	r0, r3
 80013be:	4b93      	ldr	r3, [pc, #588]	; (800160c <HAL_RCC_OscConfig+0x2c4>)
 80013c0:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff f8e4 	bl	8000590 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	07d8      	lsls	r0, r3, #31
 80013cc:	d461      	bmi.n	8001492 <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	0799      	lsls	r1, r3, #30
 80013d2:	f100 80a9 	bmi.w	8001528 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	071a      	lsls	r2, r3, #28
 80013da:	f100 80e7 	bmi.w	80015ac <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	075b      	lsls	r3, r3, #29
 80013e2:	f100 8115 	bmi.w	8001610 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013e6:	682b      	ldr	r3, [r5, #0]
 80013e8:	069a      	lsls	r2, r3, #26
 80013ea:	f100 817c 	bmi.w	80016e6 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	f040 81a3 	bne.w	800173c <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 80013f6:	2000      	movs	r0, #0
 80013f8:	e038      	b.n	800146c <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001408:	4303      	orrs	r3, r0
 800140a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140c:	6863      	ldr	r3, [r4, #4]
 800140e:	69ea      	ldr	r2, [r5, #28]
 8001410:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001418:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800141a:	f7ff feeb 	bl	80011f4 <RCC_SetFlashLatencyFromMSIRange>
 800141e:	2800      	cmp	r0, #0
 8001420:	d0c5      	beq.n	80013ae <HAL_RCC_OscConfig+0x66>
 8001422:	e7a1      	b.n	8001368 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001424:	69ab      	ldr	r3, [r5, #24]
 8001426:	b323      	cbz	r3, 8001472 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001430:	f7ff f8d6 	bl	80005e0 <HAL_GetTick>
 8001434:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	079b      	lsls	r3, r3, #30
 800143a:	d511      	bpl.n	8001460 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6023      	str	r3, [r4, #0]
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	6a2a      	ldr	r2, [r5, #32]
 8001448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800144c:	4313      	orrs	r3, r2
 800144e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001450:	6863      	ldr	r3, [r4, #4]
 8001452:	69ea      	ldr	r2, [r5, #28]
 8001454:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001458:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800145c:	6063      	str	r3, [r4, #4]
 800145e:	e7b3      	b.n	80013c8 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001460:	f7ff f8be 	bl	80005e0 <HAL_GetTick>
 8001464:	1b80      	subs	r0, r0, r6
 8001466:	2802      	cmp	r0, #2
 8001468:	d9e5      	bls.n	8001436 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 800146a:	2003      	movs	r0, #3
}
 800146c:	b002      	add	sp, #8
 800146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800147a:	f7ff f8b1 	bl	80005e0 <HAL_GetTick>
 800147e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	079f      	lsls	r7, r3, #30
 8001484:	d5a0      	bpl.n	80013c8 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001486:	f7ff f8ab 	bl	80005e0 <HAL_GetTick>
 800148a:	1b80      	subs	r0, r0, r6
 800148c:	2802      	cmp	r0, #2
 800148e:	d9f7      	bls.n	8001480 <HAL_RCC_OscConfig+0x138>
 8001490:	e7eb      	b.n	800146a <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001492:	4c5c      	ldr	r4, [pc, #368]	; (8001604 <HAL_RCC_OscConfig+0x2bc>)
 8001494:	68a3      	ldr	r3, [r4, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b08      	cmp	r3, #8
 800149c:	d009      	beq.n	80014b2 <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149e:	68a3      	ldr	r3, [r4, #8]
 80014a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80014a4:	2b0c      	cmp	r3, #12
 80014a6:	d10b      	bne.n	80014c0 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a8:	68e3      	ldr	r3, [r4, #12]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	039a      	lsls	r2, r3, #14
 80014b6:	d58a      	bpl.n	80013ce <HAL_RCC_OscConfig+0x86>
 80014b8:	686b      	ldr	r3, [r5, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d187      	bne.n	80013ce <HAL_RCC_OscConfig+0x86>
 80014be:	e753      	b.n	8001368 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	686b      	ldr	r3, [r5, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c6:	d110      	bne.n	80014ea <HAL_RCC_OscConfig+0x1a2>
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014d0:	f7ff f886 	bl	80005e0 <HAL_GetTick>
 80014d4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	039b      	lsls	r3, r3, #14
 80014da:	f53f af78 	bmi.w	80013ce <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014de:	f7ff f87f 	bl	80005e0 <HAL_GetTick>
 80014e2:	1b80      	subs	r0, r0, r6
 80014e4:	2864      	cmp	r0, #100	; 0x64
 80014e6:	d9f6      	bls.n	80014d6 <HAL_RCC_OscConfig+0x18e>
 80014e8:	e7bf      	b.n	800146a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ee:	d104      	bne.n	80014fa <HAL_RCC_OscConfig+0x1b2>
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f6:	6023      	str	r3, [r4, #0]
 80014f8:	e7e6      	b.n	80014c8 <HAL_RCC_OscConfig+0x180>
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001500:	6022      	str	r2, [r4, #0]
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001508:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1e0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 800150e:	f7ff f867 	bl	80005e0 <HAL_GetTick>
 8001512:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	039f      	lsls	r7, r3, #14
 8001518:	f57f af59 	bpl.w	80013ce <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff f860 	bl	80005e0 <HAL_GetTick>
 8001520:	1b80      	subs	r0, r0, r6
 8001522:	2864      	cmp	r0, #100	; 0x64
 8001524:	d9f6      	bls.n	8001514 <HAL_RCC_OscConfig+0x1cc>
 8001526:	e7a0      	b.n	800146a <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001528:	4c36      	ldr	r4, [pc, #216]	; (8001604 <HAL_RCC_OscConfig+0x2bc>)
 800152a:	68a3      	ldr	r3, [r4, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b04      	cmp	r3, #4
 8001532:	d009      	beq.n	8001548 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001534:	68a3      	ldr	r3, [r4, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d113      	bne.n	8001566 <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800153e:	68e3      	ldr	r3, [r4, #12]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d10e      	bne.n	8001566 <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	055e      	lsls	r6, r3, #21
 800154c:	d503      	bpl.n	8001556 <HAL_RCC_OscConfig+0x20e>
 800154e:	68eb      	ldr	r3, [r5, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f43f af09 	beq.w	8001368 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	6863      	ldr	r3, [r4, #4]
 8001558:	692a      	ldr	r2, [r5, #16]
 800155a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800155e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001562:	6063      	str	r3, [r4, #4]
 8001564:	e737      	b.n	80013d6 <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	68eb      	ldr	r3, [r5, #12]
 8001568:	b17b      	cbz	r3, 800158a <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001572:	f7ff f835 	bl	80005e0 <HAL_GetTick>
 8001576:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	0558      	lsls	r0, r3, #21
 800157c:	d4eb      	bmi.n	8001556 <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff f82f 	bl	80005e0 <HAL_GetTick>
 8001582:	1b80      	subs	r0, r0, r6
 8001584:	2802      	cmp	r0, #2
 8001586:	d9f7      	bls.n	8001578 <HAL_RCC_OscConfig+0x230>
 8001588:	e76f      	b.n	800146a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001590:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001592:	f7ff f825 	bl	80005e0 <HAL_GetTick>
 8001596:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	0559      	lsls	r1, r3, #21
 800159c:	f57f af1b 	bpl.w	80013d6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff f81e 	bl	80005e0 <HAL_GetTick>
 80015a4:	1b80      	subs	r0, r0, r6
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d9f6      	bls.n	8001598 <HAL_RCC_OscConfig+0x250>
 80015aa:	e75e      	b.n	800146a <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ac:	696b      	ldr	r3, [r5, #20]
 80015ae:	4c15      	ldr	r4, [pc, #84]	; (8001604 <HAL_RCC_OscConfig+0x2bc>)
 80015b0:	b19b      	cbz	r3, 80015da <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 80015b2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80015be:	f7ff f80f 	bl	80005e0 <HAL_GetTick>
 80015c2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80015c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80015c8:	079f      	lsls	r7, r3, #30
 80015ca:	f53f af08 	bmi.w	80013de <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff f807 	bl	80005e0 <HAL_GetTick>
 80015d2:	1b80      	subs	r0, r0, r6
 80015d4:	2802      	cmp	r0, #2
 80015d6:	d9f5      	bls.n	80015c4 <HAL_RCC_OscConfig+0x27c>
 80015d8:	e747      	b.n	800146a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80015da:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80015e6:	f7fe fffb 	bl	80005e0 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80015ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80015f0:	0798      	lsls	r0, r3, #30
 80015f2:	f57f aef4 	bpl.w	80013de <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f6:	f7fe fff3 	bl	80005e0 <HAL_GetTick>
 80015fa:	1b80      	subs	r0, r0, r6
 80015fc:	2802      	cmp	r0, #2
 80015fe:	d9f5      	bls.n	80015ec <HAL_RCC_OscConfig+0x2a4>
 8001600:	e733      	b.n	800146a <HAL_RCC_OscConfig+0x122>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	08003169 	.word	0x08003169
 800160c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001610:	4c79      	ldr	r4, [pc, #484]	; (80017f8 <HAL_RCC_OscConfig+0x4b0>)
 8001612:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001614:	00d9      	lsls	r1, r3, #3
 8001616:	d427      	bmi.n	8001668 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800162a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162c:	4e73      	ldr	r6, [pc, #460]	; (80017fc <HAL_RCC_OscConfig+0x4b4>)
 800162e:	6833      	ldr	r3, [r6, #0]
 8001630:	05da      	lsls	r2, r3, #23
 8001632:	d51b      	bpl.n	800166c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	68ab      	ldr	r3, [r5, #8]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d129      	bne.n	800168e <HAL_RCC_OscConfig+0x346>
 800163a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001646:	f7fe ffcb 	bl	80005e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800164e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001650:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001654:	0798      	lsls	r0, r3, #30
 8001656:	d540      	bpl.n	80016da <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8001658:	2f00      	cmp	r7, #0
 800165a:	f43f aec4 	beq.w	80013e6 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800165e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001664:	65a3      	str	r3, [r4, #88]	; 0x58
 8001666:	e6be      	b.n	80013e6 <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 8001668:	2700      	movs	r7, #0
 800166a:	e7df      	b.n	800162c <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800166c:	6833      	ldr	r3, [r6, #0]
 800166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001672:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001674:	f7fe ffb4 	bl	80005e0 <HAL_GetTick>
 8001678:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167a:	6833      	ldr	r3, [r6, #0]
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	d4d9      	bmi.n	8001634 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001680:	f7fe ffae 	bl	80005e0 <HAL_GetTick>
 8001684:	eba0 0008 	sub.w	r0, r0, r8
 8001688:	2802      	cmp	r0, #2
 800168a:	d9f6      	bls.n	800167a <HAL_RCC_OscConfig+0x332>
 800168c:	e6ed      	b.n	800146a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	2b05      	cmp	r3, #5
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x358>
 8001692:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800169e:	e7cc      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
 80016a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80016ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80016b0:	f022 0204 	bic.w	r2, r2, #4
 80016b4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1c4      	bne.n	8001646 <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 80016bc:	f7fe ff90 	bl	80005e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80016c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80016ca:	0799      	lsls	r1, r3, #30
 80016cc:	d5c4      	bpl.n	8001658 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7fe ff87 	bl	80005e0 <HAL_GetTick>
 80016d2:	1b80      	subs	r0, r0, r6
 80016d4:	4540      	cmp	r0, r8
 80016d6:	d9f6      	bls.n	80016c6 <HAL_RCC_OscConfig+0x37e>
 80016d8:	e6c7      	b.n	800146a <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7fe ff81 	bl	80005e0 <HAL_GetTick>
 80016de:	1b80      	subs	r0, r0, r6
 80016e0:	4540      	cmp	r0, r8
 80016e2:	d9b5      	bls.n	8001650 <HAL_RCC_OscConfig+0x308>
 80016e4:	e6c1      	b.n	800146a <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80016e8:	4c43      	ldr	r4, [pc, #268]	; (80017f8 <HAL_RCC_OscConfig+0x4b0>)
 80016ea:	b19b      	cbz	r3, 8001714 <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 80016ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80016f8:	f7fe ff72 	bl	80005e0 <HAL_GetTick>
 80016fc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80016fe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001702:	079b      	lsls	r3, r3, #30
 8001704:	f53f ae73 	bmi.w	80013ee <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001708:	f7fe ff6a 	bl	80005e0 <HAL_GetTick>
 800170c:	1b80      	subs	r0, r0, r6
 800170e:	2802      	cmp	r0, #2
 8001710:	d9f5      	bls.n	80016fe <HAL_RCC_OscConfig+0x3b6>
 8001712:	e6aa      	b.n	800146a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8001714:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001720:	f7fe ff5e 	bl	80005e0 <HAL_GetTick>
 8001724:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001726:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800172a:	079f      	lsls	r7, r3, #30
 800172c:	f57f ae5f 	bpl.w	80013ee <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001730:	f7fe ff56 	bl	80005e0 <HAL_GetTick>
 8001734:	1b80      	subs	r0, r0, r6
 8001736:	2802      	cmp	r0, #2
 8001738:	d9f5      	bls.n	8001726 <HAL_RCC_OscConfig+0x3de>
 800173a:	e696      	b.n	800146a <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173c:	4c2e      	ldr	r4, [pc, #184]	; (80017f8 <HAL_RCC_OscConfig+0x4b0>)
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b0c      	cmp	r3, #12
 8001746:	f43f ae0f 	beq.w	8001368 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 800174a:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800174c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800174e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001752:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001754:	d136      	bne.n	80017c4 <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 8001756:	f7fe ff43 	bl	80005e0 <HAL_GetTick>
 800175a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	0198      	lsls	r0, r3, #6
 8001760:	d42a      	bmi.n	80017b8 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001762:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001764:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001766:	06db      	lsls	r3, r3, #27
 8001768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800176c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800176e:	4313      	orrs	r3, r2
 8001770:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001772:	3a01      	subs	r2, #1
 8001774:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001778:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800177a:	0852      	lsrs	r2, r2, #1
 800177c:	3a01      	subs	r2, #1
 800177e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001782:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001784:	0852      	lsrs	r2, r2, #1
 8001786:	3a01      	subs	r2, #1
 8001788:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800178c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001794:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001796:	68e3      	ldr	r3, [r4, #12]
 8001798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800179c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800179e:	f7fe ff1f 	bl	80005e0 <HAL_GetTick>
 80017a2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	0199      	lsls	r1, r3, #6
 80017a8:	f53f ae25 	bmi.w	80013f6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7fe ff18 	bl	80005e0 <HAL_GetTick>
 80017b0:	1b40      	subs	r0, r0, r5
 80017b2:	2802      	cmp	r0, #2
 80017b4:	d9f6      	bls.n	80017a4 <HAL_RCC_OscConfig+0x45c>
 80017b6:	e658      	b.n	800146a <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7fe ff12 	bl	80005e0 <HAL_GetTick>
 80017bc:	1b80      	subs	r0, r0, r6
 80017be:	2802      	cmp	r0, #2
 80017c0:	d9cc      	bls.n	800175c <HAL_RCC_OscConfig+0x414>
 80017c2:	e652      	b.n	800146a <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017c8:	bf5e      	ittt	pl
 80017ca:	68e3      	ldrpl	r3, [r4, #12]
 80017cc:	f023 0303 	bicpl.w	r3, r3, #3
 80017d0:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80017d2:	68e3      	ldr	r3, [r4, #12]
 80017d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017dc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80017de:	f7fe feff 	bl	80005e0 <HAL_GetTick>
 80017e2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	019b      	lsls	r3, r3, #6
 80017e8:	f57f ae05 	bpl.w	80013f6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7fe fef8 	bl	80005e0 <HAL_GetTick>
 80017f0:	1b40      	subs	r0, r0, r5
 80017f2:	2802      	cmp	r0, #2
 80017f4:	d9f6      	bls.n	80017e4 <HAL_RCC_OscConfig+0x49c>
 80017f6:	e638      	b.n	800146a <HAL_RCC_OscConfig+0x122>
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001800:	4a56      	ldr	r2, [pc, #344]	; (800195c <HAL_RCC_ClockConfig+0x15c>)
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	428b      	cmp	r3, r1
{
 800180a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800180e:	4605      	mov	r5, r0
 8001810:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001812:	d32b      	bcc.n	800186c <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001814:	682b      	ldr	r3, [r5, #0]
 8001816:	07d9      	lsls	r1, r3, #31
 8001818:	d435      	bmi.n	8001886 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181a:	6829      	ldr	r1, [r5, #0]
 800181c:	078a      	lsls	r2, r1, #30
 800181e:	f100 8083 	bmi.w	8001928 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001822:	4a4e      	ldr	r2, [pc, #312]	; (800195c <HAL_RCC_ClockConfig+0x15c>)
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	429e      	cmp	r6, r3
 800182c:	f0c0 8084 	bcc.w	8001938 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	f011 0f04 	tst.w	r1, #4
 8001834:	4c4a      	ldr	r4, [pc, #296]	; (8001960 <HAL_RCC_ClockConfig+0x160>)
 8001836:	f040 808a 	bne.w	800194e <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183a:	070b      	lsls	r3, r1, #28
 800183c:	d506      	bpl.n	800184c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183e:	68a3      	ldr	r3, [r4, #8]
 8001840:	692a      	ldr	r2, [r5, #16]
 8001842:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001846:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800184a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800184c:	f7ff fd14 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 8001850:	68a3      	ldr	r3, [r4, #8]
 8001852:	4a44      	ldr	r2, [pc, #272]	; (8001964 <HAL_RCC_ClockConfig+0x164>)
 8001854:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	40d8      	lsrs	r0, r3
 800185c:	4b42      	ldr	r3, [pc, #264]	; (8001968 <HAL_RCC_ClockConfig+0x168>)
 800185e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001860:	2000      	movs	r0, #0
 8001862:	f7fe fe95 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8001866:	2000      	movs	r0, #0
}
 8001868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	f023 0307 	bic.w	r3, r3, #7
 8001872:	430b      	orrs	r3, r1
 8001874:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	4299      	cmp	r1, r3
 800187e:	d0c9      	beq.n	8001814 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001880:	2001      	movs	r0, #1
 8001882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001886:	686a      	ldr	r2, [r5, #4]
 8001888:	4c35      	ldr	r4, [pc, #212]	; (8001960 <HAL_RCC_ClockConfig+0x160>)
 800188a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800188c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188e:	d11c      	bne.n	80018ca <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001890:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001894:	d0f4      	beq.n	8001880 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001896:	68a3      	ldr	r3, [r4, #8]
 8001898:	f023 0303 	bic.w	r3, r3, #3
 800189c:	4313      	orrs	r3, r2
 800189e:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80018a0:	f7fe fe9e 	bl	80005e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a4:	686b      	ldr	r3, [r5, #4]
 80018a6:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 80018a8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018aa:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	d118      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b0:	68a3      	ldr	r3, [r4, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d0af      	beq.n	800181a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ba:	f7fe fe91 	bl	80005e0 <HAL_GetTick>
 80018be:	1bc0      	subs	r0, r0, r7
 80018c0:	4540      	cmp	r0, r8
 80018c2:	d9f5      	bls.n	80018b0 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80018c4:	2003      	movs	r0, #3
 80018c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ca:	2a02      	cmp	r2, #2
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80018ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018d2:	e7df      	b.n	8001894 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018d4:	b912      	cbnz	r2, 80018dc <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80018d6:	f013 0f02 	tst.w	r3, #2
 80018da:	e7db      	b.n	8001894 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80018dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80018e0:	e7d8      	b.n	8001894 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d10a      	bne.n	80018fc <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80018e6:	68a3      	ldr	r3, [r4, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d094      	beq.n	800181a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7fe fe76 	bl	80005e0 <HAL_GetTick>
 80018f4:	1bc0      	subs	r0, r0, r7
 80018f6:	4540      	cmp	r0, r8
 80018f8:	d9f5      	bls.n	80018e6 <HAL_RCC_ClockConfig+0xe6>
 80018fa:	e7e3      	b.n	80018c4 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018fc:	b973      	cbnz	r3, 800191c <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80018fe:	68a3      	ldr	r3, [r4, #8]
 8001900:	f013 0f0c 	tst.w	r3, #12
 8001904:	d089      	beq.n	800181a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f7fe fe6b 	bl	80005e0 <HAL_GetTick>
 800190a:	1bc0      	subs	r0, r0, r7
 800190c:	4540      	cmp	r0, r8
 800190e:	d9f6      	bls.n	80018fe <HAL_RCC_ClockConfig+0xfe>
 8001910:	e7d8      	b.n	80018c4 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7fe fe65 	bl	80005e0 <HAL_GetTick>
 8001916:	1bc0      	subs	r0, r0, r7
 8001918:	4540      	cmp	r0, r8
 800191a:	d8d3      	bhi.n	80018c4 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800191c:	68a3      	ldr	r3, [r4, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d1f5      	bne.n	8001912 <HAL_RCC_ClockConfig+0x112>
 8001926:	e778      	b.n	800181a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <HAL_RCC_ClockConfig+0x160>)
 800192a:	68a8      	ldr	r0, [r5, #8]
 800192c:	6893      	ldr	r3, [r2, #8]
 800192e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001932:	4303      	orrs	r3, r0
 8001934:	6093      	str	r3, [r2, #8]
 8001936:	e774      	b.n	8001822 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	f023 0307 	bic.w	r3, r3, #7
 800193e:	4333      	orrs	r3, r6
 8001940:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001942:	6813      	ldr	r3, [r2, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	429e      	cmp	r6, r3
 800194a:	d199      	bne.n	8001880 <HAL_RCC_ClockConfig+0x80>
 800194c:	e770      	b.n	8001830 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194e:	68a3      	ldr	r3, [r4, #8]
 8001950:	68ea      	ldr	r2, [r5, #12]
 8001952:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001956:	4313      	orrs	r3, r2
 8001958:	60a3      	str	r3, [r4, #8]
 800195a:	e76e      	b.n	800183a <HAL_RCC_ClockConfig+0x3a>
 800195c:	40022000 	.word	0x40022000
 8001960:	40021000 	.word	0x40021000
 8001964:	08003169 	.word	0x08003169
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetHCLKFreq>:
}
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <HAL_RCC_GetHCLKFreq+0x8>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <HAL_RCC_GetPCLK1Freq+0x14>)
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x18>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	4a03      	ldr	r2, [pc, #12]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001986:	6810      	ldr	r0, [r2, #0]
}
 8001988:	40d8      	lsrs	r0, r3
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000
 8001990:	08003179 	.word	0x08003179
 8001994:	20000000 	.word	0x20000000

08001998 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x14>)
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019a6:	6810      	ldr	r0, [r2, #0]
}
 80019a8:	40d8      	lsrs	r0, r3
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08003179 	.word	0x08003179
 80019b4:	20000000 	.word	0x20000000

080019b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80019b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80019ba:	4b44      	ldr	r3, [pc, #272]	; (8001acc <RCCEx_PLLSAI1_Config+0x114>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	f012 0f03 	tst.w	r2, #3
{
 80019c2:	4605      	mov	r5, r0
 80019c4:	460e      	mov	r6, r1
 80019c6:	461c      	mov	r4, r3
 80019c8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80019ca:	d039      	beq.n	8001a40 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	4282      	cmp	r2, r0
 80019d4:	d14b      	bne.n	8001a6e <RCCEx_PLLSAI1_Config+0xb6>
       ||
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d049      	beq.n	8001a6e <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80019da:	68db      	ldr	r3, [r3, #12]
       ||
 80019dc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80019de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80019e2:	3301      	adds	r3, #1
       ||
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d142      	bne.n	8001a6e <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80019ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f0:	f7fe fdf6 	bl	80005e0 <HAL_GetTick>
 80019f4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	011a      	lsls	r2, r3, #4
 80019fa:	d441      	bmi.n	8001a80 <RCCEx_PLLSAI1_Config+0xc8>
 80019fc:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80019fe:	2e00      	cmp	r6, #0
 8001a00:	d045      	beq.n	8001a8e <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001a02:	2e01      	cmp	r6, #1
 8001a04:	d14f      	bne.n	8001aa6 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001a06:	6922      	ldr	r2, [r4, #16]
 8001a08:	6928      	ldr	r0, [r5, #16]
 8001a0a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001a0e:	0840      	lsrs	r0, r0, #1
 8001a10:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001a14:	3801      	subs	r0, #1
 8001a16:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001a1a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001a1e:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a26:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7fe fdda 	bl	80005e0 <HAL_GetTick>
 8001a2c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	d545      	bpl.n	8001ac0 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001a34:	6923      	ldr	r3, [r4, #16]
 8001a36:	69aa      	ldr	r2, [r5, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	6123      	str	r3, [r4, #16]
 8001a3c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001a40:	2802      	cmp	r0, #2
 8001a42:	d010      	beq.n	8001a66 <RCCEx_PLLSAI1_Config+0xae>
 8001a44:	2803      	cmp	r0, #3
 8001a46:	d014      	beq.n	8001a72 <RCCEx_PLLSAI1_Config+0xba>
 8001a48:	2801      	cmp	r0, #1
 8001a4a:	d110      	bne.n	8001a6e <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	079f      	lsls	r7, r3, #30
 8001a50:	d5f5      	bpl.n	8001a3e <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001a52:	68e3      	ldr	r3, [r4, #12]
 8001a54:	686a      	ldr	r2, [r5, #4]
 8001a56:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	4318      	orrs	r0, r3
 8001a5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001a62:	60e0      	str	r0, [r4, #12]
 8001a64:	e7c0      	b.n	80019e8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001a6c:	d1f1      	bne.n	8001a52 <RCCEx_PLLSAI1_Config+0x9a>
 8001a6e:	2001      	movs	r0, #1
 8001a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	0391      	lsls	r1, r2, #14
 8001a76:	d4ec      	bmi.n	8001a52 <RCCEx_PLLSAI1_Config+0x9a>
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001a7e:	e7f5      	b.n	8001a6c <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001a80:	f7fe fdae 	bl	80005e0 <HAL_GetTick>
 8001a84:	1bc0      	subs	r0, r0, r7
 8001a86:	2802      	cmp	r0, #2
 8001a88:	d9b5      	bls.n	80019f6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001a8e:	6922      	ldr	r2, [r4, #16]
 8001a90:	68e9      	ldr	r1, [r5, #12]
 8001a92:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001a96:	06c9      	lsls	r1, r1, #27
 8001a98:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001a9c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001aa0:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001aa2:	6123      	str	r3, [r4, #16]
 8001aa4:	e7bc      	b.n	8001a20 <RCCEx_PLLSAI1_Config+0x68>
 8001aa6:	6923      	ldr	r3, [r4, #16]
 8001aa8:	6968      	ldr	r0, [r5, #20]
 8001aaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001aae:	0840      	lsrs	r0, r0, #1
 8001ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ab4:	3801      	subs	r0, #1
 8001ab6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001aba:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001abe:	e7f0      	b.n	8001aa2 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ac0:	f7fe fd8e 	bl	80005e0 <HAL_GetTick>
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9b1      	bls.n	8001a2e <RCCEx_PLLSAI1_Config+0x76>
 8001aca:	e7de      	b.n	8001a8a <RCCEx_PLLSAI1_Config+0xd2>
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ad4:	6805      	ldr	r5, [r0, #0]
 8001ad6:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001ada:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001adc:	d00e      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ade:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ae0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001ae4:	d05b      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001ae6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001aea:	d05d      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001aec:	2900      	cmp	r1, #0
 8001aee:	d166      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001af0:	3004      	adds	r0, #4
 8001af2:	f7ff ff61 	bl	80019b8 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001af6:	4605      	mov	r5, r0
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d055      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	039e      	lsls	r6, r3, #14
 8001b00:	d56d      	bpl.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4e92      	ldr	r6, [pc, #584]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b04:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001b06:	00d8      	lsls	r0, r3, #3
 8001b08:	d45b      	bmi.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	65b3      	str	r3, [r6, #88]	; 0x58
 8001b12:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b1c:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b1e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8001d50 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001b22:	f8d8 3000 	ldr.w	r3, [r8]
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001b2e:	f7fe fd57 	bl	80005e0 <HAL_GetTick>
 8001b32:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001b34:	f8d8 3000 	ldr.w	r3, [r8]
 8001b38:	05d9      	lsls	r1, r3, #23
 8001b3a:	d544      	bpl.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8001b3c:	2d00      	cmp	r5, #0
 8001b3e:	d149      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b40:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b44:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b48:	d014      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001b4a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d011      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b50:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b54:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001b58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b5c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b60:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b6c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001b70:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b74:	07da      	lsls	r2, r3, #31
 8001b76:	d509      	bpl.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001b78:	f7fe fd32 	bl	80005e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001b80:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001b82:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001b86:	079b      	lsls	r3, r3, #30
 8001b88:	f140 80c2 	bpl.w	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b8c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001b90:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001b9c:	e01a      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001b9e:	4a6b      	ldr	r2, [pc, #428]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ba0:	68d3      	ldr	r3, [r2, #12]
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ba8:	4a68      	ldr	r2, [pc, #416]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001baa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001bb0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001bba:	2500      	movs	r5, #0
 8001bbc:	e79e      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001bbe:	2501      	movs	r5, #1
 8001bc0:	e79c      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2700      	movs	r7, #0
 8001bc4:	e7ab      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc6:	f7fe fd0b 	bl	80005e0 <HAL_GetTick>
 8001bca:	eba0 0009 	sub.w	r0, r0, r9
 8001bce:	2802      	cmp	r0, #2
 8001bd0:	d9b0      	bls.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8001bd2:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001bd4:	b11f      	cbz	r7, 8001bde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	07df      	lsls	r7, r3, #31
 8001be2:	d508      	bpl.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001be4:	4959      	ldr	r1, [pc, #356]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001be6:	6a20      	ldr	r0, [r4, #32]
 8001be8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001bec:	f022 0203 	bic.w	r2, r2, #3
 8001bf0:	4302      	orrs	r2, r0
 8001bf2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bf6:	079e      	lsls	r6, r3, #30
 8001bf8:	d508      	bpl.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bfa:	4954      	ldr	r1, [pc, #336]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bfe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c02:	f022 020c 	bic.w	r2, r2, #12
 8001c06:	4302      	orrs	r2, r0
 8001c08:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c0c:	0698      	lsls	r0, r3, #26
 8001c0e:	d508      	bpl.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c10:	494e      	ldr	r1, [pc, #312]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c1c:	4302      	orrs	r2, r0
 8001c1e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c22:	0599      	lsls	r1, r3, #22
 8001c24:	d508      	bpl.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c26:	4949      	ldr	r1, [pc, #292]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c28:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c2a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c2e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001c32:	4302      	orrs	r2, r0
 8001c34:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c38:	055a      	lsls	r2, r3, #21
 8001c3a:	d508      	bpl.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c3c:	4943      	ldr	r1, [pc, #268]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c44:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001c48:	4302      	orrs	r2, r0
 8001c4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c4e:	065f      	lsls	r7, r3, #25
 8001c50:	d508      	bpl.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c52:	493e      	ldr	r1, [pc, #248]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c5a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001c5e:	4302      	orrs	r2, r0
 8001c60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c64:	05de      	lsls	r6, r3, #23
 8001c66:	d508      	bpl.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c68:	4938      	ldr	r1, [pc, #224]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001c6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c70:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001c74:	4302      	orrs	r2, r0
 8001c76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c7a:	0498      	lsls	r0, r3, #18
 8001c7c:	d50f      	bpl.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c7e:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001c86:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001c8a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001c8c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001c94:	d144      	bne.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c96:	68d3      	ldr	r3, [r2, #12]
 8001c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c9c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	0359      	lsls	r1, r3, #13
 8001ca2:	d50f      	bpl.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ca4:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ca6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001ca8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cac:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001cb0:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001cb2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001cb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001cba:	d13c      	bne.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cbc:	68d3      	ldr	r3, [r2, #12]
 8001cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cc2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	045a      	lsls	r2, r3, #17
 8001cc8:	d512      	bpl.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cca:	4920      	ldr	r1, [pc, #128]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ccc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cd2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001cd6:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001cd8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001ce0:	d106      	bne.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	1d20      	adds	r0, r4, #4
 8001ce6:	f7ff fe67 	bl	80019b8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001cea:	2800      	cmp	r0, #0
 8001cec:	bf18      	it	ne
 8001cee:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	041b      	lsls	r3, r3, #16
 8001cf4:	d508      	bpl.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cf8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001cfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d02:	430b      	orrs	r3, r1
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001d08:	4628      	mov	r0, r5
 8001d0a:	b003      	add	sp, #12
 8001d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7fe fc66 	bl	80005e0 <HAL_GetTick>
 8001d14:	eba0 0008 	sub.w	r0, r0, r8
 8001d18:	4548      	cmp	r0, r9
 8001d1a:	f67f af32 	bls.w	8001b82 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001d1e:	e758      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d20:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001d24:	d1bb      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d26:	2101      	movs	r1, #1
 8001d28:	1d20      	adds	r0, r4, #4
 8001d2a:	f7ff fe45 	bl	80019b8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	bf18      	it	ne
 8001d32:	4605      	movne	r5, r0
 8001d34:	e7b3      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001d36:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001d3a:	d1c3      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	1d20      	adds	r0, r4, #4
 8001d40:	f7ff fe3a 	bl	80019b8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001d44:	2800      	cmp	r0, #0
 8001d46:	bf18      	it	ne
 8001d48:	4605      	movne	r5, r0
 8001d4a:	e7bb      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40007000 	.word	0x40007000

08001d54 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001d54:	4a02      	ldr	r2, [pc, #8]	; (8001d60 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4770      	bx	lr
 8001d60:	40021000 	.word	0x40021000

08001d64 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8001d64:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d66:	69c1      	ldr	r1, [r0, #28]
{
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d6c:	6883      	ldr	r3, [r0, #8]
 8001d6e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d70:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d72:	4303      	orrs	r3, r0
 8001d74:	6960      	ldr	r0, [r4, #20]
 8001d76:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d78:	4882      	ldr	r0, [pc, #520]	; (8001f84 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d7a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d7c:	4028      	ands	r0, r5
 8001d7e:	4303      	orrs	r3, r0
 8001d80:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d82:	6853      	ldr	r3, [r2, #4]
 8001d84:	68e0      	ldr	r0, [r4, #12]
 8001d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d8e:	4b7e      	ldr	r3, [pc, #504]	; (8001f88 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d90:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d92:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d94:	bf1c      	itt	ne
 8001d96:	6a23      	ldrne	r3, [r4, #32]
 8001d98:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d9a:	6893      	ldr	r3, [r2, #8]
 8001d9c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001da0:	4303      	orrs	r3, r0
 8001da2:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001da4:	4b79      	ldr	r3, [pc, #484]	; (8001f8c <UART_SetConfig+0x228>)
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d114      	bne.n	8001dd4 <UART_SetConfig+0x70>
 8001daa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001dae:	4a78      	ldr	r2, [pc, #480]	; (8001f90 <UART_SetConfig+0x22c>)
 8001db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db4:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001db8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	f040 80aa 	bne.w	8001f16 <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d820      	bhi.n	8001e08 <UART_SetConfig+0xa4>
 8001dc6:	e8df f003 	tbb	[pc, r3]
 8001dca:	8f77      	.short	0x8f77
 8001dcc:	1f9b1f92 	.word	0x1f9b1f92
 8001dd0:	1f1f      	.short	0x1f1f
 8001dd2:	9e          	.byte	0x9e
 8001dd3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <UART_SetConfig+0x230>)
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d107      	bne.n	8001dea <UART_SetConfig+0x86>
 8001dda:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001dde:	4a6e      	ldr	r2, [pc, #440]	; (8001f98 <UART_SetConfig+0x234>)
 8001de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	e7e6      	b.n	8001db8 <UART_SetConfig+0x54>
 8001dea:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <UART_SetConfig+0x224>)
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 80c2 	bne.w	8001f76 <UART_SetConfig+0x212>
 8001df2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001df6:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001dfa:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001dfe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001e02:	d02a      	beq.n	8001e5a <UART_SetConfig+0xf6>
 8001e04:	d806      	bhi.n	8001e14 <UART_SetConfig+0xb0>
 8001e06:	b315      	cbz	r5, 8001e4e <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001e08:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001e0e:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8001e10:	4610      	mov	r0, r2
 8001e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e14:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001e18:	d006      	beq.n	8001e28 <UART_SetConfig+0xc4>
 8001e1a:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001e1e:	d1f3      	bne.n	8001e08 <UART_SetConfig+0xa4>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001e20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e24:	2508      	movs	r5, #8
 8001e26:	e001      	b.n	8001e2c <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001e28:	485c      	ldr	r0, [pc, #368]	; (8001f9c <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e2a:	2502      	movs	r5, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8001e2c:	6862      	ldr	r2, [r4, #4]
 8001e2e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001e32:	4283      	cmp	r3, r0
 8001e34:	d8e8      	bhi.n	8001e08 <UART_SetConfig+0xa4>
 8001e36:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001e3a:	d8e5      	bhi.n	8001e08 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001e3c:	2d08      	cmp	r5, #8
 8001e3e:	d838      	bhi.n	8001eb2 <UART_SetConfig+0x14e>
 8001e40:	e8df f005 	tbb	[pc, r5]
 8001e44:	3726370f 	.word	0x3726370f
 8001e48:	3737372e 	.word	0x3737372e
 8001e4c:	31          	.byte	0x31
 8001e4d:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001e4e:	f7ff fd93 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d1ea      	bne.n	8001e2c <UART_SetConfig+0xc8>
 8001e56:	4602      	mov	r2, r0
 8001e58:	e7d7      	b.n	8001e0a <UART_SetConfig+0xa6>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001e5a:	f7ff fa0d 	bl	8001278 <HAL_RCC_GetSysClockFreq>
      break;
 8001e5e:	2504      	movs	r5, #4
 8001e60:	e7f7      	b.n	8001e52 <UART_SetConfig+0xee>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e62:	f7ff fd89 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e66:	6862      	ldr	r2, [r4, #4]
 8001e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e6c:	0856      	lsrs	r6, r2, #1
 8001e6e:	2700      	movs	r7, #0
 8001e70:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001e74:	2300      	movs	r3, #0
 8001e76:	4630      	mov	r0, r6
 8001e78:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001e7a:	f7fe fa01 	bl	8000280 <__aeabi_uldivmod>
          break;
 8001e7e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001e80:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <UART_SetConfig+0x23c>)
 8001e82:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001e86:	4299      	cmp	r1, r3
 8001e88:	d8be      	bhi.n	8001e08 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	60d8      	str	r0, [r3, #12]
 8001e8e:	e7bc      	b.n	8001e0a <UART_SetConfig+0xa6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001e90:	4844      	ldr	r0, [pc, #272]	; (8001fa4 <UART_SetConfig+0x240>)
 8001e92:	0855      	lsrs	r5, r2, #1
 8001e94:	2300      	movs	r3, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001e9a:	f141 0100 	adc.w	r1, r1, #0
 8001e9e:	e7ec      	b.n	8001e7a <UART_SetConfig+0x116>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ea0:	f7ff f9ea 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 8001ea4:	e7df      	b.n	8001e66 <UART_SetConfig+0x102>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001ea6:	0850      	lsrs	r0, r2, #1
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001eb0:	e7f3      	b.n	8001e9a <UART_SetConfig+0x136>
          ret = HAL_ERROR;
 8001eb2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	e7e3      	b.n	8001e80 <UART_SetConfig+0x11c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001eb8:	f7ff fd5e 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ebc:	6861      	ldr	r1, [r4, #4]
 8001ebe:	084a      	lsrs	r2, r1, #1
 8001ec0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001ec4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eca:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ecc:	f1a3 0010 	sub.w	r0, r3, #16
 8001ed0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ed4:	4288      	cmp	r0, r1
 8001ed6:	d897      	bhi.n	8001e08 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001ed8:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001edc:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ede:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	60c3      	str	r3, [r0, #12]
 8001ee6:	e790      	b.n	8001e0a <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ee8:	f7ff fd56 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001eec:	e7e6      	b.n	8001ebc <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001eee:	6860      	ldr	r0, [r4, #4]
 8001ef0:	0843      	lsrs	r3, r0, #1
 8001ef2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001ef6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001efa:	fbb3 f3f0 	udiv	r3, r3, r0
 8001efe:	e7e3      	b.n	8001ec8 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f00:	f7ff f9ba 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 8001f04:	e7da      	b.n	8001ebc <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f06:	6860      	ldr	r0, [r4, #4]
 8001f08:	0843      	lsrs	r3, r0, #1
 8001f0a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001f0e:	e7f4      	b.n	8001efa <UART_SetConfig+0x196>
      ret = HAL_ERROR;
 8001f10:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e7da      	b.n	8001ecc <UART_SetConfig+0x168>
    switch (clocksource)
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d830      	bhi.n	8001f7c <UART_SetConfig+0x218>
 8001f1a:	e8df f003 	tbb	[pc, r3]
 8001f1e:	1805      	.short	0x1805
 8001f20:	2f242f1b 	.word	0x2f242f1b
 8001f24:	2f2f      	.short	0x2f2f
 8001f26:	27          	.byte	0x27
 8001f27:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f28:	f7ff fd26 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f2c:	6862      	ldr	r2, [r4, #4]
 8001f2e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f36:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f38:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f3a:	f1a3 0010 	sub.w	r0, r3, #16
 8001f3e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001f42:	4288      	cmp	r0, r1
 8001f44:	f63f af60 	bhi.w	8001e08 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001f48:	6821      	ldr	r1, [r4, #0]
 8001f4a:	60cb      	str	r3, [r1, #12]
 8001f4c:	e75d      	b.n	8001e0a <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f4e:	f7ff fd23 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001f52:	e7eb      	b.n	8001f2c <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f54:	6860      	ldr	r0, [r4, #4]
 8001f56:	0843      	lsrs	r3, r0, #1
 8001f58:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001f5c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f60:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f64:	e7e7      	b.n	8001f36 <UART_SetConfig+0x1d2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f66:	f7ff f987 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 8001f6a:	e7df      	b.n	8001f2c <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f6c:	6860      	ldr	r0, [r4, #4]
 8001f6e:	0843      	lsrs	r3, r0, #1
 8001f70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f74:	e7f4      	b.n	8001f60 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f76:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001f7a:	d0c9      	beq.n	8001f10 <UART_SetConfig+0x1ac>
      ret = HAL_ERROR;
 8001f7c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e7db      	b.n	8001f3a <UART_SetConfig+0x1d6>
 8001f82:	bf00      	nop
 8001f84:	efff69f3 	.word	0xefff69f3
 8001f88:	40008000 	.word	0x40008000
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	08003148 	.word	0x08003148
 8001f94:	40004400 	.word	0x40004400
 8001f98:	0800314c 	.word	0x0800314c
 8001f9c:	00f42400 	.word	0x00f42400
 8001fa0:	000ffcff 	.word	0x000ffcff
 8001fa4:	f4240000 	.word	0xf4240000

08001fa8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001faa:	07da      	lsls	r2, r3, #31
{
 8001fac:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fae:	d506      	bpl.n	8001fbe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fb0:	6801      	ldr	r1, [r0, #0]
 8001fb2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001fb4:	684a      	ldr	r2, [r1, #4]
 8001fb6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001fba:	4322      	orrs	r2, r4
 8001fbc:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fbe:	079c      	lsls	r4, r3, #30
 8001fc0:	d506      	bpl.n	8001fd0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fc2:	6801      	ldr	r1, [r0, #0]
 8001fc4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001fc6:	684a      	ldr	r2, [r1, #4]
 8001fc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fcc:	4322      	orrs	r2, r4
 8001fce:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fd0:	0759      	lsls	r1, r3, #29
 8001fd2:	d506      	bpl.n	8001fe2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fd4:	6801      	ldr	r1, [r0, #0]
 8001fd6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001fd8:	684a      	ldr	r2, [r1, #4]
 8001fda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fde:	4322      	orrs	r2, r4
 8001fe0:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fe2:	071a      	lsls	r2, r3, #28
 8001fe4:	d506      	bpl.n	8001ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fe6:	6801      	ldr	r1, [r0, #0]
 8001fe8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001fea:	684a      	ldr	r2, [r1, #4]
 8001fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff0:	4322      	orrs	r2, r4
 8001ff2:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ff4:	06dc      	lsls	r4, r3, #27
 8001ff6:	d506      	bpl.n	8002006 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ff8:	6801      	ldr	r1, [r0, #0]
 8001ffa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ffc:	688a      	ldr	r2, [r1, #8]
 8001ffe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002002:	4322      	orrs	r2, r4
 8002004:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002006:	0699      	lsls	r1, r3, #26
 8002008:	d506      	bpl.n	8002018 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800200a:	6801      	ldr	r1, [r0, #0]
 800200c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800200e:	688a      	ldr	r2, [r1, #8]
 8002010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002014:	4322      	orrs	r2, r4
 8002016:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002018:	065a      	lsls	r2, r3, #25
 800201a:	d50f      	bpl.n	800203c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800201c:	6801      	ldr	r1, [r0, #0]
 800201e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002020:	684a      	ldr	r2, [r1, #4]
 8002022:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002026:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002028:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800202c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800202e:	d105      	bne.n	800203c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002030:	684a      	ldr	r2, [r1, #4]
 8002032:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002034:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002038:	4322      	orrs	r2, r4
 800203a:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800203c:	061b      	lsls	r3, r3, #24
 800203e:	d506      	bpl.n	800204e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002040:	6802      	ldr	r2, [r0, #0]
 8002042:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002044:	6853      	ldr	r3, [r2, #4]
 8002046:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800204a:	430b      	orrs	r3, r1
 800204c:	6053      	str	r3, [r2, #4]
 800204e:	bd10      	pop	{r4, pc}

08002050 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002054:	9d06      	ldr	r5, [sp, #24]
 8002056:	4604      	mov	r4, r0
 8002058:	460f      	mov	r7, r1
 800205a:	4616      	mov	r6, r2
 800205c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800205e:	6821      	ldr	r1, [r4, #0]
 8002060:	69ca      	ldr	r2, [r1, #28]
 8002062:	ea37 0302 	bics.w	r3, r7, r2
 8002066:	bf0c      	ite	eq
 8002068:	2201      	moveq	r2, #1
 800206a:	2200      	movne	r2, #0
 800206c:	42b2      	cmp	r2, r6
 800206e:	d002      	beq.n	8002076 <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002070:	2000      	movs	r0, #0
}
 8002072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002076:	1c6b      	adds	r3, r5, #1
 8002078:	d0f2      	beq.n	8002060 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800207a:	b99d      	cbnz	r5, 80020a4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002084:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800208e:	2320      	movs	r3, #32
 8002090:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002094:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002098:	2300      	movs	r3, #0
 800209a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800209e:	2003      	movs	r0, #3
 80020a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020a4:	f7fe fa9c 	bl	80005e0 <HAL_GetTick>
 80020a8:	eba0 0008 	sub.w	r0, r0, r8
 80020ac:	4285      	cmp	r5, r0
 80020ae:	d2d6      	bcs.n	800205e <UART_WaitOnFlagUntilTimeout+0xe>
 80020b0:	e7e4      	b.n	800207c <UART_WaitOnFlagUntilTimeout+0x2c>

080020b2 <HAL_UART_Transmit>:
{
 80020b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80020b6:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80020b8:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80020bc:	2b20      	cmp	r3, #32
{
 80020be:	4604      	mov	r4, r0
 80020c0:	460d      	mov	r5, r1
 80020c2:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80020c4:	d14a      	bne.n	800215c <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d046      	beq.n	8002158 <HAL_UART_Transmit+0xa6>
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d044      	beq.n	8002158 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80020ce:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d042      	beq.n	800215c <HAL_UART_Transmit+0xaa>
 80020d6:	2301      	movs	r3, #1
 80020d8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020dc:	2300      	movs	r3, #0
 80020de:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020e0:	2321      	movs	r3, #33	; 0x21
 80020e2:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80020e6:	f7fe fa7b 	bl	80005e0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80020ea:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80020ee:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80020f0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80020f4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f8:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 80020fa:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020fc:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 80020fe:	b952      	cbnz	r2, 8002116 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002100:	2140      	movs	r1, #64	; 0x40
 8002102:	4620      	mov	r0, r4
 8002104:	f7ff ffa4 	bl	8002050 <UART_WaitOnFlagUntilTimeout>
 8002108:	b958      	cbnz	r0, 8002122 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800210a:	2320      	movs	r3, #32
 800210c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002110:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002114:	e006      	b.n	8002124 <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002116:	2200      	movs	r2, #0
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff ff98 	bl	8002050 <UART_WaitOnFlagUntilTimeout>
 8002120:	b118      	cbz	r0, 800212a <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002122:	2003      	movs	r0, #3
}
 8002124:	b002      	add	sp, #8
 8002126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800212a:	68a3      	ldr	r3, [r4, #8]
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	d10d      	bne.n	8002150 <HAL_UART_Transmit+0x9e>
 8002134:	6923      	ldr	r3, [r4, #16]
 8002136:	b95b      	cbnz	r3, 8002150 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002138:	f835 3b02 	ldrh.w	r3, [r5], #2
 800213c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002140:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002142:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002146:	3b01      	subs	r3, #1
 8002148:	b29b      	uxth	r3, r3
 800214a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800214e:	e7d1      	b.n	80020f4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002150:	782b      	ldrb	r3, [r5, #0]
 8002152:	8513      	strh	r3, [r2, #40]	; 0x28
 8002154:	3501      	adds	r5, #1
 8002156:	e7f4      	b.n	8002142 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002158:	2001      	movs	r0, #1
 800215a:	e7e3      	b.n	8002124 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800215c:	2002      	movs	r0, #2
 800215e:	e7e1      	b.n	8002124 <HAL_UART_Transmit+0x72>

08002160 <HAL_UART_Receive>:
{
 8002160:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002164:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8002166:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800216a:	2b20      	cmp	r3, #32
{
 800216c:	4604      	mov	r4, r0
 800216e:	460d      	mov	r5, r1
 8002170:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002172:	d160      	bne.n	8002236 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8002174:	2900      	cmp	r1, #0
 8002176:	d05c      	beq.n	8002232 <HAL_UART_Receive+0xd2>
 8002178:	2a00      	cmp	r2, #0
 800217a:	d05a      	beq.n	8002232 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 800217c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002180:	2b01      	cmp	r3, #1
 8002182:	d058      	beq.n	8002236 <HAL_UART_Receive+0xd6>
 8002184:	2301      	movs	r3, #1
 8002186:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218a:	2300      	movs	r3, #0
 800218c:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800218e:	2322      	movs	r3, #34	; 0x22
 8002190:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8002194:	f7fe fa24 	bl	80005e0 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002198:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800219a:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800219e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80021a2:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 80021a4:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80021a8:	d115      	bne.n	80021d6 <HAL_UART_Receive+0x76>
 80021aa:	6923      	ldr	r3, [r4, #16]
 80021ac:	b98b      	cbnz	r3, 80021d2 <HAL_UART_Receive+0x72>
 80021ae:	f240 13ff 	movw	r3, #511	; 0x1ff
 80021b2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80021b6:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 80021ba:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80021be:	b280      	uxth	r0, r0
 80021c0:	b9b8      	cbnz	r0, 80021f2 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 80021c2:	2320      	movs	r3, #32
 80021c4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 80021c8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80021cc:	b002      	add	sp, #8
 80021ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80021d2:	23ff      	movs	r3, #255	; 0xff
 80021d4:	e7ed      	b.n	80021b2 <HAL_UART_Receive+0x52>
 80021d6:	b923      	cbnz	r3, 80021e2 <HAL_UART_Receive+0x82>
 80021d8:	6923      	ldr	r3, [r4, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f9      	beq.n	80021d2 <HAL_UART_Receive+0x72>
 80021de:	237f      	movs	r3, #127	; 0x7f
 80021e0:	e7e7      	b.n	80021b2 <HAL_UART_Receive+0x52>
 80021e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021e6:	d1e6      	bne.n	80021b6 <HAL_UART_Receive+0x56>
 80021e8:	6923      	ldr	r3, [r4, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f7      	beq.n	80021de <HAL_UART_Receive+0x7e>
 80021ee:	233f      	movs	r3, #63	; 0x3f
 80021f0:	e7df      	b.n	80021b2 <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	f8cd 8000 	str.w	r8, [sp]
 80021f6:	463b      	mov	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	2120      	movs	r1, #32
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff ff27 	bl	8002050 <UART_WaitOnFlagUntilTimeout>
 8002202:	b9d0      	cbnz	r0, 800223a <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002204:	68a3      	ldr	r3, [r4, #8]
 8002206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	d10c      	bne.n	8002228 <HAL_UART_Receive+0xc8>
 800220e:	6922      	ldr	r2, [r4, #16]
 8002210:	b952      	cbnz	r2, 8002228 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002212:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002214:	4033      	ands	r3, r6
 8002216:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 800221a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800221e:	3b01      	subs	r3, #1
 8002220:	b29b      	uxth	r3, r3
 8002222:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8002226:	e7c8      	b.n	80021ba <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002228:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800222a:	4033      	ands	r3, r6
 800222c:	702b      	strb	r3, [r5, #0]
 800222e:	3501      	adds	r5, #1
 8002230:	e7f3      	b.n	800221a <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 8002232:	2001      	movs	r0, #1
 8002234:	e7ca      	b.n	80021cc <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8002236:	2002      	movs	r0, #2
 8002238:	e7c8      	b.n	80021cc <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800223a:	2003      	movs	r0, #3
 800223c:	e7c6      	b.n	80021cc <HAL_UART_Receive+0x6c>

0800223e <UART_CheckIdleState>:
{
 800223e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002240:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	2600      	movs	r6, #0
 8002244:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002246:	f7fe f9cb 	bl	80005e0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002250:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002252:	d417      	bmi.n	8002284 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	075b      	lsls	r3, r3, #29
 800225a:	d50a      	bpl.n	8002272 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800225c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	462b      	mov	r3, r5
 8002266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff fef0 	bl	8002050 <UART_WaitOnFlagUntilTimeout>
 8002270:	b9a0      	cbnz	r0, 800229c <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 8002272:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002274:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002276:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800227a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 800227e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002282:	e00c      	b.n	800229e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	4632      	mov	r2, r6
 800228c:	4603      	mov	r3, r0
 800228e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fedc 	bl	8002050 <UART_WaitOnFlagUntilTimeout>
 8002298:	2800      	cmp	r0, #0
 800229a:	d0db      	beq.n	8002254 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800229c:	2003      	movs	r0, #3
}
 800229e:	b002      	add	sp, #8
 80022a0:	bd70      	pop	{r4, r5, r6, pc}

080022a2 <HAL_UART_Init>:
{
 80022a2:	b510      	push	{r4, lr}
  if(huart == NULL)
 80022a4:	4604      	mov	r4, r0
 80022a6:	b360      	cbz	r0, 8002302 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80022a8:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80022ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022b0:	b91b      	cbnz	r3, 80022ba <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80022b2:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80022b6:	f000 fa41 	bl	800273c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80022ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022bc:	2324      	movs	r3, #36	; 0x24
 80022be:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80022c2:	6813      	ldr	r3, [r2, #0]
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff fd4a 	bl	8001d64 <UART_SetConfig>
 80022d0:	2801      	cmp	r0, #1
 80022d2:	d016      	beq.n	8002302 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022d6:	b113      	cbz	r3, 80022de <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff fe65 	bl	8001fa8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ee:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80022f6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80022fe:	f7ff bf9e 	b.w	800223e <UART_CheckIdleState>
}
 8002302:	2001      	movs	r0, #1
 8002304:	bd10      	pop	{r4, pc}
	...

08002308 <init_XBee>:
	pos[1] = num & 0xFF;
}


void init_XBee(UART_HandleTypeDef* huart) {
	huart_g = huart;
 8002308:	4b01      	ldr	r3, [pc, #4]	; (8002310 <init_XBee+0x8>)
 800230a:	6018      	str	r0, [r3, #0]
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000094 	.word	0x20000094

08002314 <send_XBee>:
}

void send_XBee(uint8_t *data, size_t len) {
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	b09a      	sub	sp, #104	; 0x68
	uint8_t buf[XBEE_BUFFER_LENGTH];
	uint16_t sum = 0;

	buf[0] = 0x7E;
 8002318:	237e      	movs	r3, #126	; 0x7e
	put_int16(buf + 1, len);
 800231a:	b28a      	uxth	r2, r1
	buf[0] = 0x7E;
 800231c:	f88d 3004 	strb.w	r3, [sp, #4]
	pos[0] = (num & 0xFF00) >> 8;
 8002320:	0a13      	lsrs	r3, r2, #8
 8002322:	f88d 3005 	strb.w	r3, [sp, #5]
	for (size_t i = 0; i < len; i++) {
 8002326:	2300      	movs	r3, #0
	pos[1] = num & 0xFF;
 8002328:	f88d 1006 	strb.w	r1, [sp, #6]
	uint16_t sum = 0;
 800232c:	461c      	mov	r4, r3
	for (size_t i = 0; i < len; i++) {
 800232e:	428b      	cmp	r3, r1
 8002330:	d10e      	bne.n	8002350 <send_XBee+0x3c>
		buf[i + 3] = data[i];
		sum += data[i];
		sum &= 0xFF;
	}
	buf[len + 3] = 0xFF - sum;
 8002332:	a91a      	add	r1, sp, #104	; 0x68
 8002334:	440b      	add	r3, r1
	HAL_UART_Transmit(huart_g, buf, len + 4, 100);
 8002336:	480a      	ldr	r0, [pc, #40]	; (8002360 <send_XBee+0x4c>)
	buf[len + 3] = 0xFF - sum;
 8002338:	43e4      	mvns	r4, r4
	HAL_UART_Transmit(huart_g, buf, len + 4, 100);
 800233a:	3204      	adds	r2, #4
	buf[len + 3] = 0xFF - sum;
 800233c:	f803 4c61 	strb.w	r4, [r3, #-97]
	HAL_UART_Transmit(huart_g, buf, len + 4, 100);
 8002340:	b292      	uxth	r2, r2
 8002342:	2364      	movs	r3, #100	; 0x64
 8002344:	a901      	add	r1, sp, #4
 8002346:	6800      	ldr	r0, [r0, #0]
 8002348:	f7ff feb3 	bl	80020b2 <HAL_UART_Transmit>
}
 800234c:	b01a      	add	sp, #104	; 0x68
 800234e:	bd70      	pop	{r4, r5, r6, pc}
		buf[i + 3] = data[i];
 8002350:	5cc5      	ldrb	r5, [r0, r3]
 8002352:	ae01      	add	r6, sp, #4
 8002354:	441e      	add	r6, r3
		sum += data[i];
 8002356:	442c      	add	r4, r5
		buf[i + 3] = data[i];
 8002358:	70f5      	strb	r5, [r6, #3]
		sum &= 0xFF;
 800235a:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < len; i++) {
 800235c:	3301      	adds	r3, #1
 800235e:	e7e6      	b.n	800232e <send_XBee+0x1a>
 8002360:	20000094 	.word	0x20000094

08002364 <concat_XBee>:

void concat_XBee(uint8_t *buf, char* data, size_t offset) {
 8002364:	3901      	subs	r1, #1
 8002366:	4402      	add	r2, r0
	for (size_t i = 0; data[i]; i++) {
 8002368:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800236c:	b903      	cbnz	r3, 8002370 <concat_XBee+0xc>
		buf[i + offset] = data[i];
	}
}
 800236e:	4770      	bx	lr
		buf[i + offset] = data[i];
 8002370:	f802 3b01 	strb.w	r3, [r2], #1
 8002374:	e7f8      	b.n	8002368 <concat_XBee+0x4>

08002376 <tx_req_XBee>:

void tx_req_XBee(uint8_t id, uint16_t addr, uint8_t opt, char* data) {
 8002376:	b510      	push	{r4, lr}
 8002378:	b09a      	sub	sp, #104	; 0x68
 800237a:	461c      	mov	r4, r3
	uint8_t buf[XBEE_BUFFER_LENGTH];

	buf[0] = 0x01;
 800237c:	2301      	movs	r3, #1
 800237e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = id;
 8002382:	f88d 0005 	strb.w	r0, [sp, #5]
	pos[0] = (num & 0xFF00) >> 8;
 8002386:	0a0b      	lsrs	r3, r1, #8
	pos[1] = num & 0xFF;
 8002388:	f88d 1007 	strb.w	r1, [sp, #7]
	put_int16(buf + 2, addr);
	buf[4] = opt;
 800238c:	f88d 2008 	strb.w	r2, [sp, #8]

	concat_XBee(buf, data, 5);
 8002390:	4621      	mov	r1, r4
 8002392:	2205      	movs	r2, #5
 8002394:	a801      	add	r0, sp, #4
	pos[0] = (num & 0xFF00) >> 8;
 8002396:	f88d 3006 	strb.w	r3, [sp, #6]
	concat_XBee(buf, data, 5);
 800239a:	f7ff ffe3 	bl	8002364 <concat_XBee>
	send_XBee(buf, strlen(data) + 5);
 800239e:	4620      	mov	r0, r4
 80023a0:	f7fd ff16 	bl	80001d0 <strlen>
 80023a4:	1d41      	adds	r1, r0, #5
 80023a6:	a801      	add	r0, sp, #4
 80023a8:	f7ff ffb4 	bl	8002314 <send_XBee>
}
 80023ac:	b01a      	add	sp, #104	; 0x68
 80023ae:	bd10      	pop	{r4, pc}

080023b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b0ad      	sub	sp, #180	; 0xb4
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80023b4:	f7fe feda 	bl	800116c <HAL_PWR_EnableBkUpAccess>

	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80023b8:	4a2e      	ldr	r2, [pc, #184]	; (8002474 <SystemClock_Config+0xc4>)
 80023ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80023be:	f023 0318 	bic.w	r3, r3, #24
 80023c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80023c6:	2314      	movs	r3, #20
 80023c8:	9306      	str	r3, [sp, #24]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80023ca:	2300      	movs	r3, #0
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023cc:	2401      	movs	r4, #1
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ce:	2502      	movs	r5, #2
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80023d0:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
 80023d2:	2710      	movs	r7, #16
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80023d4:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80023d6:	2607      	movs	r6, #7
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023d8:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023da:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023dc:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80023de:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e0:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80023e2:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80023e4:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 80023e6:	9713      	str	r7, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80023e8:	9614      	str	r6, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023ea:	9515      	str	r5, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023ec:	9516      	str	r5, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023ee:	f7fe ffab 	bl	8001348 <HAL_RCC_OscConfig>
 80023f2:	b100      	cbz	r0, 80023f6 <SystemClock_Config+0x46>
 80023f4:	e7fe      	b.n	80023f4 <SystemClock_Config+0x44>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80023f6:	230f      	movs	r3, #15
 80023f8:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023fa:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fc:	2303      	movs	r3, #3
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023fe:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002400:	9005      	str	r0, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002402:	4621      	mov	r1, r4
 8002404:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002406:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002408:	f7ff f9fa 	bl	8001800 <HAL_RCC_ClockConfig>
 800240c:	b100      	cbz	r0, 8002410 <SystemClock_Config+0x60>
 800240e:	e7fe      	b.n	800240e <SystemClock_Config+0x5e>
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002410:	f244 0303 	movw	r3, #16387	; 0x4003
 8002414:	9317      	str	r3, [sp, #92]	; 0x5c
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800241a:	901f      	str	r0, [sp, #124]	; 0x7c
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800241c:	9020      	str	r0, [sp, #128]	; 0x80
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800241e:	9329      	str	r3, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002420:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002426:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002428:	9419      	str	r4, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800242a:	971a      	str	r7, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800242c:	961b      	str	r6, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800242e:	951c      	str	r5, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002430:	951d      	str	r5, [sp, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002432:	931e      	str	r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002434:	f7ff fb4c 	bl	8001ad0 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	b100      	cbz	r0, 800243c <SystemClock_Config+0x8c>
 800243a:	e7fe      	b.n	800243a <SystemClock_Config+0x8a>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800243c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002440:	f7fe fea4 	bl	800118c <HAL_PWREx_ControlVoltageScaling>
 8002444:	4604      	mov	r4, r0
 8002446:	b100      	cbz	r0, 800244a <SystemClock_Config+0x9a>
 8002448:	e7fe      	b.n	8002448 <SystemClock_Config+0x98>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800244a:	f7ff fa8f 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	fbb0 f0f3 	udiv	r0, r0, r3
 8002456:	f7fe fda7 	bl	8000fa8 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800245a:	2004      	movs	r0, #4
 800245c:	f7fe fdba 	bl	8000fd4 <HAL_SYSTICK_CLKSourceConfig>

	/**Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002460:	f7ff fc78 	bl	8001d54 <HAL_RCCEx_EnableMSIPLLMode>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002464:	4622      	mov	r2, r4
 8002466:	4621      	mov	r1, r4
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7fe fd68 	bl	8000f40 <HAL_NVIC_SetPriority>
}
 8002470:	b02d      	add	sp, #180	; 0xb4
 8002472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <main>:
int main(void) {
 8002478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800247c:	b09c      	sub	sp, #112	; 0x70
	HAL_Init();
 800247e:	f7fe f89b 	bl	80005b8 <HAL_Init>
	SystemClock_Config();
 8002482:	f7ff ff95 	bl	80023b0 <SystemClock_Config>
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002486:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <main+0x1b8>)
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002488:	486a      	ldr	r0, [pc, #424]	; (8002634 <main+0x1bc>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800248a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	huart2.Instance = USART2;
 800248c:	4d6a      	ldr	r5, [pc, #424]	; (8002638 <main+0x1c0>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800248e:	f042 0204 	orr.w	r2, r2, #4
 8002492:	64da      	str	r2, [r3, #76]	; 0x4c
 8002494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002496:	f002 0204 	and.w	r2, r2, #4
 800249a:	9200      	str	r2, [sp, #0]
 800249c:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800249e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80024a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024a8:	f002 0201 	and.w	r2, r2, #1
 80024ac:	9201      	str	r2, [sp, #4]
 80024ae:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80024b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024b2:	f042 0202 	orr.w	r2, r2, #2
 80024b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2108      	movs	r1, #8

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2400      	movs	r4, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80024c6:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c8:	2601      	movs	r6, #1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80024ca:	f7fe fe49 	bl	8001160 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LD3_Pin;
 80024ce:	2308      	movs	r3, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80024d0:	a903      	add	r1, sp, #12
 80024d2:	4858      	ldr	r0, [pc, #352]	; (8002634 <main+0x1bc>)
	GPIO_InitStruct.Pin = LD3_Pin;
 80024d4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f7fe fd8c 	bl	8000ff8 <HAL_GPIO_Init>
	huart2.Init.BaudRate = 115200;
 80024e0:	4956      	ldr	r1, [pc, #344]	; (800263c <main+0x1c4>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024e2:	60ac      	str	r4, [r5, #8]
	huart2.Init.BaudRate = 115200;
 80024e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart2.Init.Mode = UART_MODE_TX_RX;
 80024e8:	270c      	movs	r7, #12
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80024ea:	4628      	mov	r0, r5
	huart2.Init.BaudRate = 115200;
 80024ec:	e885 000a 	stmia.w	r5, {r1, r3}
	huart2.Init.StopBits = UART_STOPBITS_1;
 80024f0:	60ec      	str	r4, [r5, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80024f2:	612c      	str	r4, [r5, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80024f4:	616f      	str	r7, [r5, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f6:	61ac      	str	r4, [r5, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f8:	61ec      	str	r4, [r5, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fa:	622c      	str	r4, [r5, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fc:	626c      	str	r4, [r5, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80024fe:	f7ff fed0 	bl	80022a2 <HAL_UART_Init>
 8002502:	b100      	cbz	r0, 8002506 <main+0x8e>
 8002504:	e7fe      	b.n	8002504 <main+0x8c>
	hadc1.Instance = ADC1;
 8002506:	4c4e      	ldr	r4, [pc, #312]	; (8002640 <main+0x1c8>)
 8002508:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <main+0x1cc>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800250a:	6060      	str	r0, [r4, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800250c:	60a0      	str	r0, [r4, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800250e:	60e0      	str	r0, [r4, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002510:	6120      	str	r0, [r4, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002512:	f04f 0804 	mov.w	r8, #4
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8002516:	61a0      	str	r0, [r4, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002518:	61e0      	str	r0, [r4, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800251a:	6260      	str	r0, [r4, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800251c:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800251e:	6320      	str	r0, [r4, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002520:	6360      	str	r0, [r4, #52]	; 0x34
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002522:	63a0      	str	r0, [r4, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8002524:	63e0      	str	r0, [r4, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002526:	4620      	mov	r0, r4
	hadc1.Instance = ADC1;
 8002528:	6023      	str	r3, [r4, #0]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800252a:	f8c4 8014 	str.w	r8, [r4, #20]
	hadc1.Init.NbrOfConversion = 1;
 800252e:	6226      	str	r6, [r4, #32]
	hadc1.Init.NbrOfDiscConversion = 1;
 8002530:	62a6      	str	r6, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002532:	f7fe f891 	bl	8000658 <HAL_ADC_Init>
 8002536:	b100      	cbz	r0, 800253a <main+0xc2>
 8002538:	e7fe      	b.n	8002538 <main+0xc0>
	sConfig.Channel = ADC_CHANNEL_15;
 800253a:	4b43      	ldr	r3, [pc, #268]	; (8002648 <main+0x1d0>)
 800253c:	9303      	str	r3, [sp, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800253e:	2306      	movs	r3, #6
 8002540:	9304      	str	r3, [sp, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002542:	9005      	str	r0, [sp, #20]
	sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002544:	4b41      	ldr	r3, [pc, #260]	; (800264c <main+0x1d4>)
	sConfig.Offset = 0;
 8002546:	9008      	str	r0, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002548:	a903      	add	r1, sp, #12
 800254a:	4620      	mov	r0, r4
	sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800254c:	9306      	str	r3, [sp, #24]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800254e:	f8cd 801c 	str.w	r8, [sp, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002552:	f7fe f99f 	bl	8000894 <HAL_ADC_ConfigChannel>
 8002556:	b100      	cbz	r0, 800255a <main+0xe2>
 8002558:	e7fe      	b.n	8002558 <main+0xe0>
	huart1.Instance = USART1;
 800255a:	4e3d      	ldr	r6, [pc, #244]	; (8002650 <main+0x1d8>)
	huart1.Init.BaudRate = 9600;
 800255c:	4a3d      	ldr	r2, [pc, #244]	; (8002654 <main+0x1dc>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	60b0      	str	r0, [r6, #8]
	huart1.Init.BaudRate = 9600;
 8002560:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002564:	60f0      	str	r0, [r6, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002566:	6130      	str	r0, [r6, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002568:	61b0      	str	r0, [r6, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800256a:	61f0      	str	r0, [r6, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800256c:	6230      	str	r0, [r6, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800256e:	6270      	str	r0, [r6, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002570:	4630      	mov	r0, r6
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002572:	6177      	str	r7, [r6, #20]
	huart1.Init.BaudRate = 9600;
 8002574:	e886 000c 	stmia.w	r6, {r2, r3}
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002578:	f7ff fe93 	bl	80022a2 <HAL_UART_Init>
 800257c:	4607      	mov	r7, r0
 800257e:	b100      	cbz	r0, 8002582 <main+0x10a>
 8002580:	e7fe      	b.n	8002580 <main+0x108>
	char buf[100] = "";
 8002582:	4601      	mov	r1, r0
 8002584:	2260      	movs	r2, #96	; 0x60
 8002586:	9003      	str	r0, [sp, #12]
 8002588:	a804      	add	r0, sp, #16
 800258a:	f000 f99d 	bl	80028c8 <memset>
	init_XBee(&huart1);
 800258e:	4630      	mov	r0, r6
 8002590:	f7ff feba 	bl	8002308 <init_XBee>
	memset(com_buf, 0, 100);
 8002594:	4639      	mov	r1, r7
 8002596:	2264      	movs	r2, #100	; 0x64
 8002598:	482f      	ldr	r0, [pc, #188]	; (8002658 <main+0x1e0>)
 800259a:	f000 f995 	bl	80028c8 <memset>
	com_len = 0;
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <main+0x1e4>)
	HAL_UART_Transmit(&huart1, "+++", 3, 100);
 80025a0:	492f      	ldr	r1, [pc, #188]	; (8002660 <main+0x1e8>)
	com_len = 0;
 80025a2:	601f      	str	r7, [r3, #0]
	HAL_UART_Transmit(&huart1, "+++", 3, 100);
 80025a4:	2203      	movs	r2, #3
 80025a6:	2364      	movs	r3, #100	; 0x64
 80025a8:	4630      	mov	r0, r6
 80025aa:	f7ff fd82 	bl	80020b2 <HAL_UART_Transmit>
	memset(buf, 0, 100);
 80025ae:	4639      	mov	r1, r7
 80025b0:	2264      	movs	r2, #100	; 0x64
 80025b2:	a803      	add	r0, sp, #12
 80025b4:	f000 f988 	bl	80028c8 <memset>
	HAL_UART_Receive(&huart1, buf, 3, 5000);
 80025b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80025bc:	2203      	movs	r2, #3
 80025be:	a903      	add	r1, sp, #12
 80025c0:	4630      	mov	r0, r6
 80025c2:	f7ff fdcd 	bl	8002160 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, buf, 3, 100);
 80025c6:	2364      	movs	r3, #100	; 0x64
 80025c8:	2203      	movs	r2, #3
 80025ca:	a903      	add	r1, sp, #12
 80025cc:	4628      	mov	r0, r5
 80025ce:	f7ff fd70 	bl	80020b2 <HAL_UART_Transmit>
		sprintf(buf, "Value: %d\r\n", value);
 80025d2:	4f24      	ldr	r7, [pc, #144]	; (8002664 <main+0x1ec>)
		HAL_ADC_Start(&hadc1);
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7fe fc03 	bl	8000de0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80025da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025de:	4620      	mov	r0, r4
 80025e0:	f7fe f906 	bl	80007f0 <HAL_ADC_PollForConversion>
		int value = HAL_ADC_GetValue(&hadc1);
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7fe f951 	bl	800088c <HAL_ADC_GetValue>
 80025ea:	4606      	mov	r6, r0
		HAL_ADC_Stop(&hadc1);
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7fe fc76 	bl	8000ede <HAL_ADC_Stop>
		value = abs(value - 1988);
 80025f2:	f2a6 72c4 	subw	r2, r6, #1988	; 0x7c4
		sprintf(buf, "Value: %d\r\n", value);
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	bfb8      	it	lt
 80025fa:	4252      	neglt	r2, r2
 80025fc:	4639      	mov	r1, r7
 80025fe:	a803      	add	r0, sp, #12
 8002600:	f000 f96a 	bl	80028d8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 100);
 8002604:	a803      	add	r0, sp, #12
 8002606:	f7fd fde3 	bl	80001d0 <strlen>
 800260a:	a903      	add	r1, sp, #12
 800260c:	b282      	uxth	r2, r0
 800260e:	2364      	movs	r3, #100	; 0x64
 8002610:	4628      	mov	r0, r5
 8002612:	f7ff fd4e 	bl	80020b2 <HAL_UART_Transmit>
		tx_req_XBee(1, 0xAB01, 0, buf);
 8002616:	ab03      	add	r3, sp, #12
 8002618:	2200      	movs	r2, #0
 800261a:	f64a 3101 	movw	r1, #43777	; 0xab01
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff fea9 	bl	8002376 <tx_req_XBee>
		HAL_Delay(5000);
 8002624:	f241 3088 	movw	r0, #5000	; 0x1388
 8002628:	f7fd ffe0 	bl	80005ec <HAL_Delay>
 800262c:	e7d2      	b.n	80025d4 <main+0x15c>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	48000400 	.word	0x48000400
 8002638:	20000308 	.word	0x20000308
 800263c:	40004400 	.word	0x40004400
 8002640:	20000098 	.word	0x20000098
 8002644:	50040000 	.word	0x50040000
 8002648:	3ef08000 	.word	0x3ef08000
 800264c:	407f0000 	.word	0x407f0000
 8002650:	20000100 	.word	0x20000100
 8002654:	40013800 	.word	0x40013800
 8002658:	20000178 	.word	0x20000178
 800265c:	20000380 	.word	0x20000380
 8002660:	08003159 	.word	0x08003159
 8002664:	0800315d 	.word	0x0800315d

08002668 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <HAL_MspInit+0x88>)
{
 800266a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	661a      	str	r2, [r3, #96]	; 0x60
 8002674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002676:	f002 0201 	and.w	r2, r2, #1
 800267a:	9200      	str	r2, [sp, #0]
 800267c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002680:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002684:	659a      	str	r2, [r3, #88]	; 0x58
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002692:	f7fe fc43 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	4611      	mov	r1, r2
 800269a:	f06f 000b 	mvn.w	r0, #11
 800269e:	f7fe fc4f 	bl	8000f40 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	4611      	mov	r1, r2
 80026a6:	f06f 000a 	mvn.w	r0, #10
 80026aa:	f7fe fc49 	bl	8000f40 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	4611      	mov	r1, r2
 80026b2:	f06f 0009 	mvn.w	r0, #9
 80026b6:	f7fe fc43 	bl	8000f40 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	4611      	mov	r1, r2
 80026be:	f06f 0004 	mvn.w	r0, #4
 80026c2:	f7fe fc3d 	bl	8000f40 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	4611      	mov	r1, r2
 80026ca:	f06f 0003 	mvn.w	r0, #3
 80026ce:	f7fe fc37 	bl	8000f40 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	4611      	mov	r1, r2
 80026d6:	f06f 0001 	mvn.w	r0, #1
 80026da:	f7fe fc31 	bl	8000f40 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	4611      	mov	r1, r2
 80026e2:	f04f 30ff 	mov.w	r0, #4294967295
 80026e6:	f7fe fc2b 	bl	8000f40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ea:	b003      	add	sp, #12
 80026ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80026f6:	6802      	ldr	r2, [r0, #0]
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_ADC_MspInit+0x40>)
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d116      	bne.n	800272c <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80026fe:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002702:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 8002708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270a:	480b      	ldr	r0, [pc, #44]	; (8002738 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800270c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002710:	64da      	str	r2, [r3, #76]	; 0x4c
 8002712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800271c:	2303      	movs	r3, #3
 800271e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002720:	230b      	movs	r3, #11
 8002722:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f7fe fc66 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800272c:	b007      	add	sp, #28
 800272e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002732:	bf00      	nop
 8002734:	50040000 	.word	0x50040000
 8002738:	48000400 	.word	0x48000400

0800273c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800273c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800273e:	6803      	ldr	r3, [r0, #0]
 8002740:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <HAL_UART_MspInit+0x8c>)
 8002742:	4293      	cmp	r3, r2
{
 8002744:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8002746:	d11b      	bne.n	8002780 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002748:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_UART_MspInit+0x90>)
 800274a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800274c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002750:	661a      	str	r2, [r3, #96]	; 0x60
 8002752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800275c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002760:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002766:	2301      	movs	r3, #1
 8002768:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800276e:	2307      	movs	r3, #7
 8002770:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002772:	a903      	add	r1, sp, #12
 8002774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002778:	f7fe fc3e 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800277c:	b008      	add	sp, #32
 800277e:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8002780:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_UART_MspInit+0x94>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d1fa      	bne.n	800277c <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_UART_MspInit+0x90>)
 8002788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800278a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800278e:	659a      	str	r2, [r3, #88]	; 0x58
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800279a:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800279e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027a2:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027a6:	a903      	add	r1, sp, #12
 80027a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ac:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f7fe fc20 	bl	8000ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80027b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80027c4:	9407      	str	r4, [sp, #28]
 80027c6:	e7d4      	b.n	8002772 <HAL_UART_MspInit+0x36>
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40004400 	.word	0x40004400

080027d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80027d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d6:	f7fd fefb 	bl	80005d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80027de:	f7fe bc06 	b.w	8000fee <HAL_SYSTICK_IRQHandler>
	...

080027e4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e4:	490f      	ldr	r1, [pc, #60]	; (8002824 <SystemInit+0x40>)
 80027e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80027ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <SystemInit+0x44>)
 80027f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80027f6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80027fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002806:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800280a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800280c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002810:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002818:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800281a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800281c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002820:	608b      	str	r3, [r1, #8]
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00
 8002828:	40021000 	.word	0x40021000

0800282c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002864 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002830:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002832:	e003      	b.n	800283c <LoopCopyDataInit>

08002834 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002836:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002838:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800283a:	3104      	adds	r1, #4

0800283c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800283c:	480b      	ldr	r0, [pc, #44]	; (800286c <LoopForever+0xa>)
	ldr	r3, =_edata
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002840:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002842:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002844:	d3f6      	bcc.n	8002834 <CopyDataInit>
	ldr	r2, =_sbss
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002848:	e002      	b.n	8002850 <LoopFillZerobss>

0800284a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800284a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800284c:	f842 3b04 	str.w	r3, [r2], #4

08002850 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <LoopForever+0x16>)
	cmp	r2, r3
 8002852:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002854:	d3f9      	bcc.n	800284a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002856:	f7ff ffc5 	bl	80027e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285a:	f000 f811 	bl	8002880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800285e:	f7ff fe0b 	bl	8002478 <main>

08002862 <LoopForever>:

LoopForever:
    b LoopForever
 8002862:	e7fe      	b.n	8002862 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002864:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002868:	080031f8 	.word	0x080031f8
	ldr	r0, =_sdata
 800286c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002870:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002874:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8002878:	20000388 	.word	0x20000388

0800287c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC1_IRQHandler>
	...

08002880 <__libc_init_array>:
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	4e0d      	ldr	r6, [pc, #52]	; (80028b8 <__libc_init_array+0x38>)
 8002884:	4c0d      	ldr	r4, [pc, #52]	; (80028bc <__libc_init_array+0x3c>)
 8002886:	1ba4      	subs	r4, r4, r6
 8002888:	10a4      	asrs	r4, r4, #2
 800288a:	2500      	movs	r5, #0
 800288c:	42a5      	cmp	r5, r4
 800288e:	d109      	bne.n	80028a4 <__libc_init_array+0x24>
 8002890:	4e0b      	ldr	r6, [pc, #44]	; (80028c0 <__libc_init_array+0x40>)
 8002892:	4c0c      	ldr	r4, [pc, #48]	; (80028c4 <__libc_init_array+0x44>)
 8002894:	f000 fc4c 	bl	8003130 <_init>
 8002898:	1ba4      	subs	r4, r4, r6
 800289a:	10a4      	asrs	r4, r4, #2
 800289c:	2500      	movs	r5, #0
 800289e:	42a5      	cmp	r5, r4
 80028a0:	d105      	bne.n	80028ae <__libc_init_array+0x2e>
 80028a2:	bd70      	pop	{r4, r5, r6, pc}
 80028a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a8:	4798      	blx	r3
 80028aa:	3501      	adds	r5, #1
 80028ac:	e7ee      	b.n	800288c <__libc_init_array+0xc>
 80028ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028b2:	4798      	blx	r3
 80028b4:	3501      	adds	r5, #1
 80028b6:	e7f2      	b.n	800289e <__libc_init_array+0x1e>
 80028b8:	080031f0 	.word	0x080031f0
 80028bc:	080031f0 	.word	0x080031f0
 80028c0:	080031f0 	.word	0x080031f0
 80028c4:	080031f4 	.word	0x080031f4

080028c8 <memset>:
 80028c8:	4402      	add	r2, r0
 80028ca:	4603      	mov	r3, r0
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d100      	bne.n	80028d2 <memset+0xa>
 80028d0:	4770      	bx	lr
 80028d2:	f803 1b01 	strb.w	r1, [r3], #1
 80028d6:	e7f9      	b.n	80028cc <memset+0x4>

080028d8 <siprintf>:
 80028d8:	b40e      	push	{r1, r2, r3}
 80028da:	b500      	push	{lr}
 80028dc:	b09c      	sub	sp, #112	; 0x70
 80028de:	f44f 7102 	mov.w	r1, #520	; 0x208
 80028e2:	ab1d      	add	r3, sp, #116	; 0x74
 80028e4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80028e8:	9002      	str	r0, [sp, #8]
 80028ea:	9006      	str	r0, [sp, #24]
 80028ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028f0:	480a      	ldr	r0, [pc, #40]	; (800291c <siprintf+0x44>)
 80028f2:	9104      	str	r1, [sp, #16]
 80028f4:	9107      	str	r1, [sp, #28]
 80028f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80028fe:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002902:	6800      	ldr	r0, [r0, #0]
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	a902      	add	r1, sp, #8
 8002908:	f000 f866 	bl	80029d8 <_svfiprintf_r>
 800290c:	9b02      	ldr	r3, [sp, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	b01c      	add	sp, #112	; 0x70
 8002914:	f85d eb04 	ldr.w	lr, [sp], #4
 8002918:	b003      	add	sp, #12
 800291a:	4770      	bx	lr
 800291c:	20000004 	.word	0x20000004

08002920 <__ssputs_r>:
 8002920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002924:	688e      	ldr	r6, [r1, #8]
 8002926:	429e      	cmp	r6, r3
 8002928:	4682      	mov	sl, r0
 800292a:	460c      	mov	r4, r1
 800292c:	4691      	mov	r9, r2
 800292e:	4698      	mov	r8, r3
 8002930:	d835      	bhi.n	800299e <__ssputs_r+0x7e>
 8002932:	898a      	ldrh	r2, [r1, #12]
 8002934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002938:	d031      	beq.n	800299e <__ssputs_r+0x7e>
 800293a:	6825      	ldr	r5, [r4, #0]
 800293c:	6909      	ldr	r1, [r1, #16]
 800293e:	1a6f      	subs	r7, r5, r1
 8002940:	6965      	ldr	r5, [r4, #20]
 8002942:	2302      	movs	r3, #2
 8002944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002948:	fb95 f5f3 	sdiv	r5, r5, r3
 800294c:	f108 0301 	add.w	r3, r8, #1
 8002950:	443b      	add	r3, r7
 8002952:	429d      	cmp	r5, r3
 8002954:	bf38      	it	cc
 8002956:	461d      	movcc	r5, r3
 8002958:	0553      	lsls	r3, r2, #21
 800295a:	d531      	bpl.n	80029c0 <__ssputs_r+0xa0>
 800295c:	4629      	mov	r1, r5
 800295e:	f000 fb39 	bl	8002fd4 <_malloc_r>
 8002962:	4606      	mov	r6, r0
 8002964:	b950      	cbnz	r0, 800297c <__ssputs_r+0x5c>
 8002966:	230c      	movs	r3, #12
 8002968:	f8ca 3000 	str.w	r3, [sl]
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002972:	81a3      	strh	r3, [r4, #12]
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800297c:	463a      	mov	r2, r7
 800297e:	6921      	ldr	r1, [r4, #16]
 8002980:	f000 fab4 	bl	8002eec <memcpy>
 8002984:	89a3      	ldrh	r3, [r4, #12]
 8002986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	81a3      	strh	r3, [r4, #12]
 8002990:	6126      	str	r6, [r4, #16]
 8002992:	6165      	str	r5, [r4, #20]
 8002994:	443e      	add	r6, r7
 8002996:	1bed      	subs	r5, r5, r7
 8002998:	6026      	str	r6, [r4, #0]
 800299a:	60a5      	str	r5, [r4, #8]
 800299c:	4646      	mov	r6, r8
 800299e:	4546      	cmp	r6, r8
 80029a0:	bf28      	it	cs
 80029a2:	4646      	movcs	r6, r8
 80029a4:	4632      	mov	r2, r6
 80029a6:	4649      	mov	r1, r9
 80029a8:	6820      	ldr	r0, [r4, #0]
 80029aa:	f000 faaa 	bl	8002f02 <memmove>
 80029ae:	68a3      	ldr	r3, [r4, #8]
 80029b0:	1b9b      	subs	r3, r3, r6
 80029b2:	60a3      	str	r3, [r4, #8]
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	441e      	add	r6, r3
 80029b8:	6026      	str	r6, [r4, #0]
 80029ba:	2000      	movs	r0, #0
 80029bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c0:	462a      	mov	r2, r5
 80029c2:	f000 fb65 	bl	8003090 <_realloc_r>
 80029c6:	4606      	mov	r6, r0
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d1e1      	bne.n	8002990 <__ssputs_r+0x70>
 80029cc:	6921      	ldr	r1, [r4, #16]
 80029ce:	4650      	mov	r0, sl
 80029d0:	f000 fab2 	bl	8002f38 <_free_r>
 80029d4:	e7c7      	b.n	8002966 <__ssputs_r+0x46>
	...

080029d8 <_svfiprintf_r>:
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029dc:	b09d      	sub	sp, #116	; 0x74
 80029de:	4680      	mov	r8, r0
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	898b      	ldrh	r3, [r1, #12]
 80029e4:	061c      	lsls	r4, r3, #24
 80029e6:	460d      	mov	r5, r1
 80029e8:	4616      	mov	r6, r2
 80029ea:	d50f      	bpl.n	8002a0c <_svfiprintf_r+0x34>
 80029ec:	690b      	ldr	r3, [r1, #16]
 80029ee:	b96b      	cbnz	r3, 8002a0c <_svfiprintf_r+0x34>
 80029f0:	2140      	movs	r1, #64	; 0x40
 80029f2:	f000 faef 	bl	8002fd4 <_malloc_r>
 80029f6:	6028      	str	r0, [r5, #0]
 80029f8:	6128      	str	r0, [r5, #16]
 80029fa:	b928      	cbnz	r0, 8002a08 <_svfiprintf_r+0x30>
 80029fc:	230c      	movs	r3, #12
 80029fe:	f8c8 3000 	str.w	r3, [r8]
 8002a02:	f04f 30ff 	mov.w	r0, #4294967295
 8002a06:	e0c5      	b.n	8002b94 <_svfiprintf_r+0x1bc>
 8002a08:	2340      	movs	r3, #64	; 0x40
 8002a0a:	616b      	str	r3, [r5, #20]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a10:	2320      	movs	r3, #32
 8002a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a16:	2330      	movs	r3, #48	; 0x30
 8002a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a1c:	f04f 0b01 	mov.w	fp, #1
 8002a20:	4637      	mov	r7, r6
 8002a22:	463c      	mov	r4, r7
 8002a24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d13c      	bne.n	8002aa6 <_svfiprintf_r+0xce>
 8002a2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a30:	d00b      	beq.n	8002a4a <_svfiprintf_r+0x72>
 8002a32:	4653      	mov	r3, sl
 8002a34:	4632      	mov	r2, r6
 8002a36:	4629      	mov	r1, r5
 8002a38:	4640      	mov	r0, r8
 8002a3a:	f7ff ff71 	bl	8002920 <__ssputs_r>
 8002a3e:	3001      	adds	r0, #1
 8002a40:	f000 80a3 	beq.w	8002b8a <_svfiprintf_r+0x1b2>
 8002a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a46:	4453      	add	r3, sl
 8002a48:	9309      	str	r3, [sp, #36]	; 0x24
 8002a4a:	783b      	ldrb	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 809c 	beq.w	8002b8a <_svfiprintf_r+0x1b2>
 8002a52:	2300      	movs	r3, #0
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	9304      	str	r3, [sp, #16]
 8002a5a:	9307      	str	r3, [sp, #28]
 8002a5c:	9205      	str	r2, [sp, #20]
 8002a5e:	9306      	str	r3, [sp, #24]
 8002a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a64:	931a      	str	r3, [sp, #104]	; 0x68
 8002a66:	2205      	movs	r2, #5
 8002a68:	7821      	ldrb	r1, [r4, #0]
 8002a6a:	4850      	ldr	r0, [pc, #320]	; (8002bac <_svfiprintf_r+0x1d4>)
 8002a6c:	f7fd fbb8 	bl	80001e0 <memchr>
 8002a70:	1c67      	adds	r7, r4, #1
 8002a72:	9b04      	ldr	r3, [sp, #16]
 8002a74:	b9d8      	cbnz	r0, 8002aae <_svfiprintf_r+0xd6>
 8002a76:	06d9      	lsls	r1, r3, #27
 8002a78:	bf44      	itt	mi
 8002a7a:	2220      	movmi	r2, #32
 8002a7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a80:	071a      	lsls	r2, r3, #28
 8002a82:	bf44      	itt	mi
 8002a84:	222b      	movmi	r2, #43	; 0x2b
 8002a86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a8a:	7822      	ldrb	r2, [r4, #0]
 8002a8c:	2a2a      	cmp	r2, #42	; 0x2a
 8002a8e:	d016      	beq.n	8002abe <_svfiprintf_r+0xe6>
 8002a90:	9a07      	ldr	r2, [sp, #28]
 8002a92:	2100      	movs	r1, #0
 8002a94:	200a      	movs	r0, #10
 8002a96:	4627      	mov	r7, r4
 8002a98:	3401      	adds	r4, #1
 8002a9a:	783b      	ldrb	r3, [r7, #0]
 8002a9c:	3b30      	subs	r3, #48	; 0x30
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d951      	bls.n	8002b46 <_svfiprintf_r+0x16e>
 8002aa2:	b1c9      	cbz	r1, 8002ad8 <_svfiprintf_r+0x100>
 8002aa4:	e011      	b.n	8002aca <_svfiprintf_r+0xf2>
 8002aa6:	2b25      	cmp	r3, #37	; 0x25
 8002aa8:	d0c0      	beq.n	8002a2c <_svfiprintf_r+0x54>
 8002aaa:	4627      	mov	r7, r4
 8002aac:	e7b9      	b.n	8002a22 <_svfiprintf_r+0x4a>
 8002aae:	4a3f      	ldr	r2, [pc, #252]	; (8002bac <_svfiprintf_r+0x1d4>)
 8002ab0:	1a80      	subs	r0, r0, r2
 8002ab2:	fa0b f000 	lsl.w	r0, fp, r0
 8002ab6:	4318      	orrs	r0, r3
 8002ab8:	9004      	str	r0, [sp, #16]
 8002aba:	463c      	mov	r4, r7
 8002abc:	e7d3      	b.n	8002a66 <_svfiprintf_r+0x8e>
 8002abe:	9a03      	ldr	r2, [sp, #12]
 8002ac0:	1d11      	adds	r1, r2, #4
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	9103      	str	r1, [sp, #12]
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	db01      	blt.n	8002ace <_svfiprintf_r+0xf6>
 8002aca:	9207      	str	r2, [sp, #28]
 8002acc:	e004      	b.n	8002ad8 <_svfiprintf_r+0x100>
 8002ace:	4252      	negs	r2, r2
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	9207      	str	r2, [sp, #28]
 8002ad6:	9304      	str	r3, [sp, #16]
 8002ad8:	783b      	ldrb	r3, [r7, #0]
 8002ada:	2b2e      	cmp	r3, #46	; 0x2e
 8002adc:	d10e      	bne.n	8002afc <_svfiprintf_r+0x124>
 8002ade:	787b      	ldrb	r3, [r7, #1]
 8002ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae2:	f107 0101 	add.w	r1, r7, #1
 8002ae6:	d132      	bne.n	8002b4e <_svfiprintf_r+0x176>
 8002ae8:	9b03      	ldr	r3, [sp, #12]
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	9203      	str	r2, [sp, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bfb8      	it	lt
 8002af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002af8:	3702      	adds	r7, #2
 8002afa:	9305      	str	r3, [sp, #20]
 8002afc:	4c2c      	ldr	r4, [pc, #176]	; (8002bb0 <_svfiprintf_r+0x1d8>)
 8002afe:	7839      	ldrb	r1, [r7, #0]
 8002b00:	2203      	movs	r2, #3
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7fd fb6c 	bl	80001e0 <memchr>
 8002b08:	b138      	cbz	r0, 8002b1a <_svfiprintf_r+0x142>
 8002b0a:	2340      	movs	r3, #64	; 0x40
 8002b0c:	1b00      	subs	r0, r0, r4
 8002b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8002b12:	9b04      	ldr	r3, [sp, #16]
 8002b14:	4303      	orrs	r3, r0
 8002b16:	9304      	str	r3, [sp, #16]
 8002b18:	3701      	adds	r7, #1
 8002b1a:	7839      	ldrb	r1, [r7, #0]
 8002b1c:	4825      	ldr	r0, [pc, #148]	; (8002bb4 <_svfiprintf_r+0x1dc>)
 8002b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b22:	2206      	movs	r2, #6
 8002b24:	1c7e      	adds	r6, r7, #1
 8002b26:	f7fd fb5b 	bl	80001e0 <memchr>
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	d035      	beq.n	8002b9a <_svfiprintf_r+0x1c2>
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <_svfiprintf_r+0x1e0>)
 8002b30:	b9fb      	cbnz	r3, 8002b72 <_svfiprintf_r+0x19a>
 8002b32:	9b03      	ldr	r3, [sp, #12]
 8002b34:	3307      	adds	r3, #7
 8002b36:	f023 0307 	bic.w	r3, r3, #7
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	9303      	str	r3, [sp, #12]
 8002b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b40:	444b      	add	r3, r9
 8002b42:	9309      	str	r3, [sp, #36]	; 0x24
 8002b44:	e76c      	b.n	8002a20 <_svfiprintf_r+0x48>
 8002b46:	fb00 3202 	mla	r2, r0, r2, r3
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	e7a3      	b.n	8002a96 <_svfiprintf_r+0xbe>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9305      	str	r3, [sp, #20]
 8002b52:	4618      	mov	r0, r3
 8002b54:	240a      	movs	r4, #10
 8002b56:	460f      	mov	r7, r1
 8002b58:	3101      	adds	r1, #1
 8002b5a:	783a      	ldrb	r2, [r7, #0]
 8002b5c:	3a30      	subs	r2, #48	; 0x30
 8002b5e:	2a09      	cmp	r2, #9
 8002b60:	d903      	bls.n	8002b6a <_svfiprintf_r+0x192>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ca      	beq.n	8002afc <_svfiprintf_r+0x124>
 8002b66:	9005      	str	r0, [sp, #20]
 8002b68:	e7c8      	b.n	8002afc <_svfiprintf_r+0x124>
 8002b6a:	fb04 2000 	mla	r0, r4, r0, r2
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e7f1      	b.n	8002b56 <_svfiprintf_r+0x17e>
 8002b72:	ab03      	add	r3, sp, #12
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	462a      	mov	r2, r5
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <_svfiprintf_r+0x1e4>)
 8002b7a:	a904      	add	r1, sp, #16
 8002b7c:	4640      	mov	r0, r8
 8002b7e:	f3af 8000 	nop.w
 8002b82:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b86:	4681      	mov	r9, r0
 8002b88:	d1d9      	bne.n	8002b3e <_svfiprintf_r+0x166>
 8002b8a:	89ab      	ldrh	r3, [r5, #12]
 8002b8c:	065b      	lsls	r3, r3, #25
 8002b8e:	f53f af38 	bmi.w	8002a02 <_svfiprintf_r+0x2a>
 8002b92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b94:	b01d      	add	sp, #116	; 0x74
 8002b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b9a:	ab03      	add	r3, sp, #12
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	462a      	mov	r2, r5
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <_svfiprintf_r+0x1e4>)
 8002ba2:	a904      	add	r1, sp, #16
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	f000 f881 	bl	8002cac <_printf_i>
 8002baa:	e7ea      	b.n	8002b82 <_svfiprintf_r+0x1aa>
 8002bac:	080031b4 	.word	0x080031b4
 8002bb0:	080031ba 	.word	0x080031ba
 8002bb4:	080031be 	.word	0x080031be
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	08002921 	.word	0x08002921

08002bc0 <_printf_common>:
 8002bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc4:	4691      	mov	r9, r2
 8002bc6:	461f      	mov	r7, r3
 8002bc8:	688a      	ldr	r2, [r1, #8]
 8002bca:	690b      	ldr	r3, [r1, #16]
 8002bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	bfb8      	it	lt
 8002bd4:	4613      	movlt	r3, r2
 8002bd6:	f8c9 3000 	str.w	r3, [r9]
 8002bda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bde:	4606      	mov	r6, r0
 8002be0:	460c      	mov	r4, r1
 8002be2:	b112      	cbz	r2, 8002bea <_printf_common+0x2a>
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8c9 3000 	str.w	r3, [r9]
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	0699      	lsls	r1, r3, #26
 8002bee:	bf42      	ittt	mi
 8002bf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002bf4:	3302      	addmi	r3, #2
 8002bf6:	f8c9 3000 	strmi.w	r3, [r9]
 8002bfa:	6825      	ldr	r5, [r4, #0]
 8002bfc:	f015 0506 	ands.w	r5, r5, #6
 8002c00:	d107      	bne.n	8002c12 <_printf_common+0x52>
 8002c02:	f104 0a19 	add.w	sl, r4, #25
 8002c06:	68e3      	ldr	r3, [r4, #12]
 8002c08:	f8d9 2000 	ldr.w	r2, [r9]
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	429d      	cmp	r5, r3
 8002c10:	db29      	blt.n	8002c66 <_printf_common+0xa6>
 8002c12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	3300      	adds	r3, #0
 8002c1a:	bf18      	it	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	0692      	lsls	r2, r2, #26
 8002c20:	d42e      	bmi.n	8002c80 <_printf_common+0xc0>
 8002c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c26:	4639      	mov	r1, r7
 8002c28:	4630      	mov	r0, r6
 8002c2a:	47c0      	blx	r8
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d021      	beq.n	8002c74 <_printf_common+0xb4>
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	68e5      	ldr	r5, [r4, #12]
 8002c34:	f8d9 2000 	ldr.w	r2, [r9]
 8002c38:	f003 0306 	and.w	r3, r3, #6
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	bf08      	it	eq
 8002c40:	1aad      	subeq	r5, r5, r2
 8002c42:	68a3      	ldr	r3, [r4, #8]
 8002c44:	6922      	ldr	r2, [r4, #16]
 8002c46:	bf0c      	ite	eq
 8002c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c4c:	2500      	movne	r5, #0
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	bfc4      	itt	gt
 8002c52:	1a9b      	subgt	r3, r3, r2
 8002c54:	18ed      	addgt	r5, r5, r3
 8002c56:	f04f 0900 	mov.w	r9, #0
 8002c5a:	341a      	adds	r4, #26
 8002c5c:	454d      	cmp	r5, r9
 8002c5e:	d11b      	bne.n	8002c98 <_printf_common+0xd8>
 8002c60:	2000      	movs	r0, #0
 8002c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c66:	2301      	movs	r3, #1
 8002c68:	4652      	mov	r2, sl
 8002c6a:	4639      	mov	r1, r7
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	47c0      	blx	r8
 8002c70:	3001      	adds	r0, #1
 8002c72:	d103      	bne.n	8002c7c <_printf_common+0xbc>
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c7c:	3501      	adds	r5, #1
 8002c7e:	e7c2      	b.n	8002c06 <_printf_common+0x46>
 8002c80:	18e1      	adds	r1, r4, r3
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	2030      	movs	r0, #48	; 0x30
 8002c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c8a:	4422      	add	r2, r4
 8002c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c94:	3302      	adds	r3, #2
 8002c96:	e7c4      	b.n	8002c22 <_printf_common+0x62>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	4639      	mov	r1, r7
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	47c0      	blx	r8
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d0e6      	beq.n	8002c74 <_printf_common+0xb4>
 8002ca6:	f109 0901 	add.w	r9, r9, #1
 8002caa:	e7d7      	b.n	8002c5c <_printf_common+0x9c>

08002cac <_printf_i>:
 8002cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cb0:	4617      	mov	r7, r2
 8002cb2:	7e0a      	ldrb	r2, [r1, #24]
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	2a6e      	cmp	r2, #110	; 0x6e
 8002cb8:	4698      	mov	r8, r3
 8002cba:	4606      	mov	r6, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cc0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002cc4:	f000 80bc 	beq.w	8002e40 <_printf_i+0x194>
 8002cc8:	d81a      	bhi.n	8002d00 <_printf_i+0x54>
 8002cca:	2a63      	cmp	r2, #99	; 0x63
 8002ccc:	d02e      	beq.n	8002d2c <_printf_i+0x80>
 8002cce:	d80a      	bhi.n	8002ce6 <_printf_i+0x3a>
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	f000 80c8 	beq.w	8002e66 <_printf_i+0x1ba>
 8002cd6:	2a58      	cmp	r2, #88	; 0x58
 8002cd8:	f000 808a 	beq.w	8002df0 <_printf_i+0x144>
 8002cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ce0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002ce4:	e02a      	b.n	8002d3c <_printf_i+0x90>
 8002ce6:	2a64      	cmp	r2, #100	; 0x64
 8002ce8:	d001      	beq.n	8002cee <_printf_i+0x42>
 8002cea:	2a69      	cmp	r2, #105	; 0x69
 8002cec:	d1f6      	bne.n	8002cdc <_printf_i+0x30>
 8002cee:	6821      	ldr	r1, [r4, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002cf6:	d023      	beq.n	8002d40 <_printf_i+0x94>
 8002cf8:	1d11      	adds	r1, r2, #4
 8002cfa:	6019      	str	r1, [r3, #0]
 8002cfc:	6813      	ldr	r3, [r2, #0]
 8002cfe:	e027      	b.n	8002d50 <_printf_i+0xa4>
 8002d00:	2a73      	cmp	r2, #115	; 0x73
 8002d02:	f000 80b4 	beq.w	8002e6e <_printf_i+0x1c2>
 8002d06:	d808      	bhi.n	8002d1a <_printf_i+0x6e>
 8002d08:	2a6f      	cmp	r2, #111	; 0x6f
 8002d0a:	d02a      	beq.n	8002d62 <_printf_i+0xb6>
 8002d0c:	2a70      	cmp	r2, #112	; 0x70
 8002d0e:	d1e5      	bne.n	8002cdc <_printf_i+0x30>
 8002d10:	680a      	ldr	r2, [r1, #0]
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	600a      	str	r2, [r1, #0]
 8002d18:	e003      	b.n	8002d22 <_printf_i+0x76>
 8002d1a:	2a75      	cmp	r2, #117	; 0x75
 8002d1c:	d021      	beq.n	8002d62 <_printf_i+0xb6>
 8002d1e:	2a78      	cmp	r2, #120	; 0x78
 8002d20:	d1dc      	bne.n	8002cdc <_printf_i+0x30>
 8002d22:	2278      	movs	r2, #120	; 0x78
 8002d24:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d28:	496e      	ldr	r1, [pc, #440]	; (8002ee4 <_printf_i+0x238>)
 8002d2a:	e064      	b.n	8002df6 <_printf_i+0x14a>
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d32:	1d11      	adds	r1, r2, #4
 8002d34:	6019      	str	r1, [r3, #0]
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0a3      	b.n	8002e88 <_printf_i+0x1dc>
 8002d40:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d44:	f102 0104 	add.w	r1, r2, #4
 8002d48:	6019      	str	r1, [r3, #0]
 8002d4a:	d0d7      	beq.n	8002cfc <_printf_i+0x50>
 8002d4c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	da03      	bge.n	8002d5c <_printf_i+0xb0>
 8002d54:	222d      	movs	r2, #45	; 0x2d
 8002d56:	425b      	negs	r3, r3
 8002d58:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d5c:	4962      	ldr	r1, [pc, #392]	; (8002ee8 <_printf_i+0x23c>)
 8002d5e:	220a      	movs	r2, #10
 8002d60:	e017      	b.n	8002d92 <_printf_i+0xe6>
 8002d62:	6820      	ldr	r0, [r4, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d6a:	d003      	beq.n	8002d74 <_printf_i+0xc8>
 8002d6c:	1d08      	adds	r0, r1, #4
 8002d6e:	6018      	str	r0, [r3, #0]
 8002d70:	680b      	ldr	r3, [r1, #0]
 8002d72:	e006      	b.n	8002d82 <_printf_i+0xd6>
 8002d74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d78:	f101 0004 	add.w	r0, r1, #4
 8002d7c:	6018      	str	r0, [r3, #0]
 8002d7e:	d0f7      	beq.n	8002d70 <_printf_i+0xc4>
 8002d80:	880b      	ldrh	r3, [r1, #0]
 8002d82:	4959      	ldr	r1, [pc, #356]	; (8002ee8 <_printf_i+0x23c>)
 8002d84:	2a6f      	cmp	r2, #111	; 0x6f
 8002d86:	bf14      	ite	ne
 8002d88:	220a      	movne	r2, #10
 8002d8a:	2208      	moveq	r2, #8
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002d92:	6865      	ldr	r5, [r4, #4]
 8002d94:	60a5      	str	r5, [r4, #8]
 8002d96:	2d00      	cmp	r5, #0
 8002d98:	f2c0 809c 	blt.w	8002ed4 <_printf_i+0x228>
 8002d9c:	6820      	ldr	r0, [r4, #0]
 8002d9e:	f020 0004 	bic.w	r0, r0, #4
 8002da2:	6020      	str	r0, [r4, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d13f      	bne.n	8002e28 <_printf_i+0x17c>
 8002da8:	2d00      	cmp	r5, #0
 8002daa:	f040 8095 	bne.w	8002ed8 <_printf_i+0x22c>
 8002dae:	4675      	mov	r5, lr
 8002db0:	2a08      	cmp	r2, #8
 8002db2:	d10b      	bne.n	8002dcc <_printf_i+0x120>
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	07da      	lsls	r2, r3, #31
 8002db8:	d508      	bpl.n	8002dcc <_printf_i+0x120>
 8002dba:	6923      	ldr	r3, [r4, #16]
 8002dbc:	6862      	ldr	r2, [r4, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	bfde      	ittt	le
 8002dc2:	2330      	movle	r3, #48	; 0x30
 8002dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dcc:	ebae 0305 	sub.w	r3, lr, r5
 8002dd0:	6123      	str	r3, [r4, #16]
 8002dd2:	f8cd 8000 	str.w	r8, [sp]
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	aa03      	add	r2, sp, #12
 8002dda:	4621      	mov	r1, r4
 8002ddc:	4630      	mov	r0, r6
 8002dde:	f7ff feef 	bl	8002bc0 <_printf_common>
 8002de2:	3001      	adds	r0, #1
 8002de4:	d155      	bne.n	8002e92 <_printf_i+0x1e6>
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dea:	b005      	add	sp, #20
 8002dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002df0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002df4:	493c      	ldr	r1, [pc, #240]	; (8002ee8 <_printf_i+0x23c>)
 8002df6:	6822      	ldr	r2, [r4, #0]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002dfe:	f100 0504 	add.w	r5, r0, #4
 8002e02:	601d      	str	r5, [r3, #0]
 8002e04:	d001      	beq.n	8002e0a <_printf_i+0x15e>
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	e002      	b.n	8002e10 <_printf_i+0x164>
 8002e0a:	0655      	lsls	r5, r2, #25
 8002e0c:	d5fb      	bpl.n	8002e06 <_printf_i+0x15a>
 8002e0e:	8803      	ldrh	r3, [r0, #0]
 8002e10:	07d0      	lsls	r0, r2, #31
 8002e12:	bf44      	itt	mi
 8002e14:	f042 0220 	orrmi.w	r2, r2, #32
 8002e18:	6022      	strmi	r2, [r4, #0]
 8002e1a:	b91b      	cbnz	r3, 8002e24 <_printf_i+0x178>
 8002e1c:	6822      	ldr	r2, [r4, #0]
 8002e1e:	f022 0220 	bic.w	r2, r2, #32
 8002e22:	6022      	str	r2, [r4, #0]
 8002e24:	2210      	movs	r2, #16
 8002e26:	e7b1      	b.n	8002d8c <_printf_i+0xe0>
 8002e28:	4675      	mov	r5, lr
 8002e2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e2e:	fb02 3310 	mls	r3, r2, r0, r3
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d1f5      	bne.n	8002e2a <_printf_i+0x17e>
 8002e3e:	e7b7      	b.n	8002db0 <_printf_i+0x104>
 8002e40:	6808      	ldr	r0, [r1, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	6949      	ldr	r1, [r1, #20]
 8002e46:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e4a:	d004      	beq.n	8002e56 <_printf_i+0x1aa>
 8002e4c:	1d10      	adds	r0, r2, #4
 8002e4e:	6018      	str	r0, [r3, #0]
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	6019      	str	r1, [r3, #0]
 8002e54:	e007      	b.n	8002e66 <_printf_i+0x1ba>
 8002e56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e5a:	f102 0004 	add.w	r0, r2, #4
 8002e5e:	6018      	str	r0, [r3, #0]
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	d0f6      	beq.n	8002e52 <_printf_i+0x1a6>
 8002e64:	8019      	strh	r1, [r3, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	6123      	str	r3, [r4, #16]
 8002e6a:	4675      	mov	r5, lr
 8002e6c:	e7b1      	b.n	8002dd2 <_printf_i+0x126>
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	1d11      	adds	r1, r2, #4
 8002e72:	6019      	str	r1, [r3, #0]
 8002e74:	6815      	ldr	r5, [r2, #0]
 8002e76:	6862      	ldr	r2, [r4, #4]
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	f7fd f9b0 	bl	80001e0 <memchr>
 8002e80:	b108      	cbz	r0, 8002e86 <_printf_i+0x1da>
 8002e82:	1b40      	subs	r0, r0, r5
 8002e84:	6060      	str	r0, [r4, #4]
 8002e86:	6863      	ldr	r3, [r4, #4]
 8002e88:	6123      	str	r3, [r4, #16]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e90:	e79f      	b.n	8002dd2 <_printf_i+0x126>
 8002e92:	6923      	ldr	r3, [r4, #16]
 8002e94:	462a      	mov	r2, r5
 8002e96:	4639      	mov	r1, r7
 8002e98:	4630      	mov	r0, r6
 8002e9a:	47c0      	blx	r8
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d0a2      	beq.n	8002de6 <_printf_i+0x13a>
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	079b      	lsls	r3, r3, #30
 8002ea4:	d507      	bpl.n	8002eb6 <_printf_i+0x20a>
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	f104 0919 	add.w	r9, r4, #25
 8002eac:	68e3      	ldr	r3, [r4, #12]
 8002eae:	9a03      	ldr	r2, [sp, #12]
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	429d      	cmp	r5, r3
 8002eb4:	db05      	blt.n	8002ec2 <_printf_i+0x216>
 8002eb6:	68e0      	ldr	r0, [r4, #12]
 8002eb8:	9b03      	ldr	r3, [sp, #12]
 8002eba:	4298      	cmp	r0, r3
 8002ebc:	bfb8      	it	lt
 8002ebe:	4618      	movlt	r0, r3
 8002ec0:	e793      	b.n	8002dea <_printf_i+0x13e>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	464a      	mov	r2, r9
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	4630      	mov	r0, r6
 8002eca:	47c0      	blx	r8
 8002ecc:	3001      	adds	r0, #1
 8002ece:	d08a      	beq.n	8002de6 <_printf_i+0x13a>
 8002ed0:	3501      	adds	r5, #1
 8002ed2:	e7eb      	b.n	8002eac <_printf_i+0x200>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1a7      	bne.n	8002e28 <_printf_i+0x17c>
 8002ed8:	780b      	ldrb	r3, [r1, #0]
 8002eda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ede:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ee2:	e765      	b.n	8002db0 <_printf_i+0x104>
 8002ee4:	080031d6 	.word	0x080031d6
 8002ee8:	080031c5 	.word	0x080031c5

08002eec <memcpy>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	1e43      	subs	r3, r0, #1
 8002ef0:	440a      	add	r2, r1
 8002ef2:	4291      	cmp	r1, r2
 8002ef4:	d100      	bne.n	8002ef8 <memcpy+0xc>
 8002ef6:	bd10      	pop	{r4, pc}
 8002ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f00:	e7f7      	b.n	8002ef2 <memcpy+0x6>

08002f02 <memmove>:
 8002f02:	4288      	cmp	r0, r1
 8002f04:	b510      	push	{r4, lr}
 8002f06:	eb01 0302 	add.w	r3, r1, r2
 8002f0a:	d803      	bhi.n	8002f14 <memmove+0x12>
 8002f0c:	1e42      	subs	r2, r0, #1
 8002f0e:	4299      	cmp	r1, r3
 8002f10:	d10c      	bne.n	8002f2c <memmove+0x2a>
 8002f12:	bd10      	pop	{r4, pc}
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d2f9      	bcs.n	8002f0c <memmove+0xa>
 8002f18:	1881      	adds	r1, r0, r2
 8002f1a:	1ad2      	subs	r2, r2, r3
 8002f1c:	42d3      	cmn	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memmove+0x20>
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f2a:	e7f7      	b.n	8002f1c <memmove+0x1a>
 8002f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f34:	e7eb      	b.n	8002f0e <memmove+0xc>
	...

08002f38 <_free_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	d045      	beq.n	8002fcc <_free_r+0x94>
 8002f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f44:	1f0c      	subs	r4, r1, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bfb8      	it	lt
 8002f4a:	18e4      	addlt	r4, r4, r3
 8002f4c:	f000 f8d6 	bl	80030fc <__malloc_lock>
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <_free_r+0x98>)
 8002f52:	6813      	ldr	r3, [r2, #0]
 8002f54:	4610      	mov	r0, r2
 8002f56:	b933      	cbnz	r3, 8002f66 <_free_r+0x2e>
 8002f58:	6063      	str	r3, [r4, #4]
 8002f5a:	6014      	str	r4, [r2, #0]
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f62:	f000 b8cc 	b.w	80030fe <__malloc_unlock>
 8002f66:	42a3      	cmp	r3, r4
 8002f68:	d90c      	bls.n	8002f84 <_free_r+0x4c>
 8002f6a:	6821      	ldr	r1, [r4, #0]
 8002f6c:	1862      	adds	r2, r4, r1
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	bf04      	itt	eq
 8002f72:	681a      	ldreq	r2, [r3, #0]
 8002f74:	685b      	ldreq	r3, [r3, #4]
 8002f76:	6063      	str	r3, [r4, #4]
 8002f78:	bf04      	itt	eq
 8002f7a:	1852      	addeq	r2, r2, r1
 8002f7c:	6022      	streq	r2, [r4, #0]
 8002f7e:	6004      	str	r4, [r0, #0]
 8002f80:	e7ec      	b.n	8002f5c <_free_r+0x24>
 8002f82:	4613      	mov	r3, r2
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	b10a      	cbz	r2, 8002f8c <_free_r+0x54>
 8002f88:	42a2      	cmp	r2, r4
 8002f8a:	d9fa      	bls.n	8002f82 <_free_r+0x4a>
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	1858      	adds	r0, r3, r1
 8002f90:	42a0      	cmp	r0, r4
 8002f92:	d10b      	bne.n	8002fac <_free_r+0x74>
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	4401      	add	r1, r0
 8002f98:	1858      	adds	r0, r3, r1
 8002f9a:	4282      	cmp	r2, r0
 8002f9c:	6019      	str	r1, [r3, #0]
 8002f9e:	d1dd      	bne.n	8002f5c <_free_r+0x24>
 8002fa0:	6810      	ldr	r0, [r2, #0]
 8002fa2:	6852      	ldr	r2, [r2, #4]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	4401      	add	r1, r0
 8002fa8:	6019      	str	r1, [r3, #0]
 8002faa:	e7d7      	b.n	8002f5c <_free_r+0x24>
 8002fac:	d902      	bls.n	8002fb4 <_free_r+0x7c>
 8002fae:	230c      	movs	r3, #12
 8002fb0:	602b      	str	r3, [r5, #0]
 8002fb2:	e7d3      	b.n	8002f5c <_free_r+0x24>
 8002fb4:	6820      	ldr	r0, [r4, #0]
 8002fb6:	1821      	adds	r1, r4, r0
 8002fb8:	428a      	cmp	r2, r1
 8002fba:	bf04      	itt	eq
 8002fbc:	6811      	ldreq	r1, [r2, #0]
 8002fbe:	6852      	ldreq	r2, [r2, #4]
 8002fc0:	6062      	str	r2, [r4, #4]
 8002fc2:	bf04      	itt	eq
 8002fc4:	1809      	addeq	r1, r1, r0
 8002fc6:	6021      	streq	r1, [r4, #0]
 8002fc8:	605c      	str	r4, [r3, #4]
 8002fca:	e7c7      	b.n	8002f5c <_free_r+0x24>
 8002fcc:	bd38      	pop	{r3, r4, r5, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000084 	.word	0x20000084

08002fd4 <_malloc_r>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	1ccd      	adds	r5, r1, #3
 8002fd8:	f025 0503 	bic.w	r5, r5, #3
 8002fdc:	3508      	adds	r5, #8
 8002fde:	2d0c      	cmp	r5, #12
 8002fe0:	bf38      	it	cc
 8002fe2:	250c      	movcc	r5, #12
 8002fe4:	2d00      	cmp	r5, #0
 8002fe6:	4606      	mov	r6, r0
 8002fe8:	db01      	blt.n	8002fee <_malloc_r+0x1a>
 8002fea:	42a9      	cmp	r1, r5
 8002fec:	d903      	bls.n	8002ff6 <_malloc_r+0x22>
 8002fee:	230c      	movs	r3, #12
 8002ff0:	6033      	str	r3, [r6, #0]
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	f000 f881 	bl	80030fc <__malloc_lock>
 8002ffa:	4a23      	ldr	r2, [pc, #140]	; (8003088 <_malloc_r+0xb4>)
 8002ffc:	6814      	ldr	r4, [r2, #0]
 8002ffe:	4621      	mov	r1, r4
 8003000:	b991      	cbnz	r1, 8003028 <_malloc_r+0x54>
 8003002:	4c22      	ldr	r4, [pc, #136]	; (800308c <_malloc_r+0xb8>)
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	b91b      	cbnz	r3, 8003010 <_malloc_r+0x3c>
 8003008:	4630      	mov	r0, r6
 800300a:	f000 f867 	bl	80030dc <_sbrk_r>
 800300e:	6020      	str	r0, [r4, #0]
 8003010:	4629      	mov	r1, r5
 8003012:	4630      	mov	r0, r6
 8003014:	f000 f862 	bl	80030dc <_sbrk_r>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d126      	bne.n	800306a <_malloc_r+0x96>
 800301c:	230c      	movs	r3, #12
 800301e:	6033      	str	r3, [r6, #0]
 8003020:	4630      	mov	r0, r6
 8003022:	f000 f86c 	bl	80030fe <__malloc_unlock>
 8003026:	e7e4      	b.n	8002ff2 <_malloc_r+0x1e>
 8003028:	680b      	ldr	r3, [r1, #0]
 800302a:	1b5b      	subs	r3, r3, r5
 800302c:	d41a      	bmi.n	8003064 <_malloc_r+0x90>
 800302e:	2b0b      	cmp	r3, #11
 8003030:	d90f      	bls.n	8003052 <_malloc_r+0x7e>
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	50cd      	str	r5, [r1, r3]
 8003036:	18cc      	adds	r4, r1, r3
 8003038:	4630      	mov	r0, r6
 800303a:	f000 f860 	bl	80030fe <__malloc_unlock>
 800303e:	f104 000b 	add.w	r0, r4, #11
 8003042:	1d23      	adds	r3, r4, #4
 8003044:	f020 0007 	bic.w	r0, r0, #7
 8003048:	1ac3      	subs	r3, r0, r3
 800304a:	d01b      	beq.n	8003084 <_malloc_r+0xb0>
 800304c:	425a      	negs	r2, r3
 800304e:	50e2      	str	r2, [r4, r3]
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	428c      	cmp	r4, r1
 8003054:	bf0d      	iteet	eq
 8003056:	6863      	ldreq	r3, [r4, #4]
 8003058:	684b      	ldrne	r3, [r1, #4]
 800305a:	6063      	strne	r3, [r4, #4]
 800305c:	6013      	streq	r3, [r2, #0]
 800305e:	bf18      	it	ne
 8003060:	460c      	movne	r4, r1
 8003062:	e7e9      	b.n	8003038 <_malloc_r+0x64>
 8003064:	460c      	mov	r4, r1
 8003066:	6849      	ldr	r1, [r1, #4]
 8003068:	e7ca      	b.n	8003000 <_malloc_r+0x2c>
 800306a:	1cc4      	adds	r4, r0, #3
 800306c:	f024 0403 	bic.w	r4, r4, #3
 8003070:	42a0      	cmp	r0, r4
 8003072:	d005      	beq.n	8003080 <_malloc_r+0xac>
 8003074:	1a21      	subs	r1, r4, r0
 8003076:	4630      	mov	r0, r6
 8003078:	f000 f830 	bl	80030dc <_sbrk_r>
 800307c:	3001      	adds	r0, #1
 800307e:	d0cd      	beq.n	800301c <_malloc_r+0x48>
 8003080:	6025      	str	r5, [r4, #0]
 8003082:	e7d9      	b.n	8003038 <_malloc_r+0x64>
 8003084:	bd70      	pop	{r4, r5, r6, pc}
 8003086:	bf00      	nop
 8003088:	20000084 	.word	0x20000084
 800308c:	20000088 	.word	0x20000088

08003090 <_realloc_r>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	4607      	mov	r7, r0
 8003094:	4614      	mov	r4, r2
 8003096:	460e      	mov	r6, r1
 8003098:	b921      	cbnz	r1, 80030a4 <_realloc_r+0x14>
 800309a:	4611      	mov	r1, r2
 800309c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030a0:	f7ff bf98 	b.w	8002fd4 <_malloc_r>
 80030a4:	b922      	cbnz	r2, 80030b0 <_realloc_r+0x20>
 80030a6:	f7ff ff47 	bl	8002f38 <_free_r>
 80030aa:	4625      	mov	r5, r4
 80030ac:	4628      	mov	r0, r5
 80030ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b0:	f000 f826 	bl	8003100 <_malloc_usable_size_r>
 80030b4:	4284      	cmp	r4, r0
 80030b6:	d90f      	bls.n	80030d8 <_realloc_r+0x48>
 80030b8:	4621      	mov	r1, r4
 80030ba:	4638      	mov	r0, r7
 80030bc:	f7ff ff8a 	bl	8002fd4 <_malloc_r>
 80030c0:	4605      	mov	r5, r0
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d0f2      	beq.n	80030ac <_realloc_r+0x1c>
 80030c6:	4631      	mov	r1, r6
 80030c8:	4622      	mov	r2, r4
 80030ca:	f7ff ff0f 	bl	8002eec <memcpy>
 80030ce:	4631      	mov	r1, r6
 80030d0:	4638      	mov	r0, r7
 80030d2:	f7ff ff31 	bl	8002f38 <_free_r>
 80030d6:	e7e9      	b.n	80030ac <_realloc_r+0x1c>
 80030d8:	4635      	mov	r5, r6
 80030da:	e7e7      	b.n	80030ac <_realloc_r+0x1c>

080030dc <_sbrk_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	4c06      	ldr	r4, [pc, #24]	; (80030f8 <_sbrk_r+0x1c>)
 80030e0:	2300      	movs	r3, #0
 80030e2:	4605      	mov	r5, r0
 80030e4:	4608      	mov	r0, r1
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	f000 f814 	bl	8003114 <_sbrk>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d102      	bne.n	80030f6 <_sbrk_r+0x1a>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	b103      	cbz	r3, 80030f6 <_sbrk_r+0x1a>
 80030f4:	602b      	str	r3, [r5, #0]
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	20000384 	.word	0x20000384

080030fc <__malloc_lock>:
 80030fc:	4770      	bx	lr

080030fe <__malloc_unlock>:
 80030fe:	4770      	bx	lr

08003100 <_malloc_usable_size_r>:
 8003100:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003104:	2800      	cmp	r0, #0
 8003106:	f1a0 0004 	sub.w	r0, r0, #4
 800310a:	bfbc      	itt	lt
 800310c:	580b      	ldrlt	r3, [r1, r0]
 800310e:	18c0      	addlt	r0, r0, r3
 8003110:	4770      	bx	lr
	...

08003114 <_sbrk>:
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <_sbrk+0x14>)
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	4602      	mov	r2, r0
 800311a:	b909      	cbnz	r1, 8003120 <_sbrk+0xc>
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <_sbrk+0x18>)
 800311e:	6019      	str	r1, [r3, #0]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	4402      	add	r2, r0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	4770      	bx	lr
 8003128:	2000008c 	.word	0x2000008c
 800312c:	20000388 	.word	0x20000388

08003130 <_init>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	bf00      	nop
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr

0800313c <_fini>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	bf00      	nop
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr
